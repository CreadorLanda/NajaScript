# Exemplo de Jogo - Pássaro Voador
# Um jogo estilo Flappy Bird usando NajaGame2D

import "NajaGame2D";

# Constantes do jogo
float GRAVIDADE = 1500;
float FORCA_PULO = -400;
int VELOCIDADE_CANOS = 200;
int INTERVALO_CANOS = 1.5;  # segundos
int ABERTURA_CANOS = 150;   # espaço entre canos

# Variáveis globais
dict passaro;
list canos = list();
dict fundo;
dict chao;
int pontuacao = 0;
bool game_over = false;
float tempo_ultimo_cano = 0;

# Inicializa o jogo
fun iniciarJogo() {
    # Cria a janela e inicializa o jogo
    dict jogo = initGame(800, 600, "Pássaro Voador");
    
    # Carrega sprites
    dict sprite_passaro = criarSprite("imagens/passaro.png", 50, 35);
    configurarSpriteSheet(sprite_passaro, 3, 3, 0.1);  # 3 frames de animação
    
    dict sprite_cano = criarSprite("imagens/cano.png", 60, 300);
    dict sprite_fundo = criarSprite("imagens/fundo.png", 800, 600);
    dict sprite_chao = criarSprite("imagens/chao.png", 800, 100);
    
    # Carrega sons
    tocarMusicaFundo("sons/musica_jogo.mp3", true);
    
    # Cria o pássaro
    passaro = criarObjeto("passaro", 150, 300, sprite_passaro);
    passaro.velocidade_y = 0;
    
    # Cria o fundo e o chão
    fundo = criarObjeto("fundo", 0, 0, sprite_fundo);
    chao = criarObjeto("chao", 0, 500, sprite_chao);
    
    # Cria as cenas
    dict cena_jogo = criarCena("jogo", atualizarJogo, renderizarJogo);
    dict cena_game_over = criarCena("game_over", atualizarGameOver, renderizarGameOver);
    
    # Adiciona objetos às cenas
    adicionarObjetoACena(cena_jogo, fundo);
    adicionarObjetoACena(cena_jogo, passaro);
    adicionarObjetoACena(cena_jogo, chao);
    
    # Adiciona cenas ao jogo
    adicionarCena(jogo, cena_jogo);
    adicionarCena(jogo, cena_game_over);
    
    # Inicia o jogo
    startGame(jogo);
    
    return jogo;
}

# Cria um novo par de canos
fun criarCanos(dict jogo, dict sprite) {
    # Altura aleatória para os canos
    int altura_cano_baixo = Math.random() * 200 + 150;
    
    # Cria o cano de baixo
    dict cano_baixo = criarObjeto("cano_baixo", 800, altura_cano_baixo, sprite);
    
    # Cria o cano de cima (invertido)
    dict cano_cima = criarObjeto("cano_cima", 800, altura_cano_baixo - ABERTURA_CANOS - 300, sprite);
    cano_cima.escala_y = -1;  # Inverte o sprite verticalmente
    
    # Adiciona à lista de canos
    canos.add(cano_baixo);
    canos.add(cano_cima);
    
    # Adiciona os canos à cena atual
    dict cena = jogo.cenas.get(jogo.cena_atual);
    adicionarObjetoACena(cena, cano_baixo);
    adicionarObjetoACena(cena, cano_cima);
}

# Atualiza a lógica do jogo
fun atualizarJogo(dict jogo, float delta_tempo) {
    if (game_over) {
        trocarCena(jogo, "game_over");
        return;
    }
    
    # Processa entrada
    if (teclaEstaPressionada(jogo, "espaco") || mouseEstaSendoClicado(jogo)) {
        passaro.velocidade_y = FORCA_PULO;
        tocarSom("sons/pulo.wav");
    }
    
    # Aplica gravidade ao pássaro
    aplicarGravidade(passaro, GRAVIDADE, delta_tempo);
    
    # Rotaciona o pássaro de acordo com a velocidade
    passaro.rotacao = Math.clamp(passaro.velocidade_y * 0.05, -30, 90);
    
    # Atualiza posição do pássaro
    atualizarObjeto(passaro, delta_tempo);
    
    # Cria novos canos periodicamente
    tempo_ultimo_cano = tempo_ultimo_cano + delta_tempo;
    if (tempo_ultimo_cano >= INTERVALO_CANOS) {
        dict sprite_cano = jogo.sprites.get("cano");
        criarCanos(jogo, sprite_cano);
        tempo_ultimo_cano = 0;
    }
    
    # Atualiza os canos
    for (int i = canos.length() - 1; i >= 0; i = i - 1) {
        dict cano = canos.get(i);
        cano.velocidade_x = -VELOCIDADE_CANOS;
        atualizarObjeto(cano, delta_tempo);
        
        # Remove canos que saíram da tela
        if (cano.x < -cano.largura) {
            canos.remove(i);
        }
        
        # Verifica se o pássaro passou por um cano (incrementa pontuação)
        if (cano.x + cano.largura <= passaro.x && !cano.contado && cano.nome == "cano_baixo") {
            pontuacao = pontuacao + 1;
            tocarSom("sons/ponto.wav");
            cano.contado = true;
        }
        
        # Verifica colisão com canos
        if (verificarColisao(passaro, cano)) {
            tocarSom("sons/colisao.wav");
            game_over = true;
        }
    }
    
    # Verifica colisão com o chão
    if (passaro.y + passaro.altura >= chao.y) {
        passaro.y = chao.y - passaro.altura;
        tocarSom("sons/colisao.wav");
        game_over = true;
    }
    
    # Verifica se o pássaro saiu por cima da tela
    if (passaro.y < 0) {
        passaro.y = 0;
        passaro.velocidade_y = 0;
    }
}

# Renderiza o jogo
fun renderizarJogo(dict jogo) {
    dict cena = jogo.cenas.get(jogo.cena_atual);
    
    # Renderiza todos os objetos da cena
    forin (objeto in cena.objetos) {
        renderizarObjeto(jogo, objeto);
    }
    
    # Renderiza a pontuação
    desenharTexto("Pontuação: " + pontuacao, 20, 20, _CORES.branco, "30px Arial");
}

# Atualiza a tela de game over
fun atualizarGameOver(dict jogo, float delta_tempo) {
    if (teclaEstaPressionada(jogo, "r")) {
        # Reinicia o jogo
        resetarJogo();
        trocarCena(jogo, "jogo");
    }
}

# Renderiza a tela de game over
fun renderizarGameOver(dict jogo) {
    # Renderiza o fundo
    renderizarObjeto(jogo, fundo);
    
    # Renderiza mensagem de game over
    desenharTexto("GAME OVER", 250, 200, _CORES.vermelho, "48px Arial");
    desenharTexto("Pontuação: " + pontuacao, 300, 250, _CORES.branco, "30px Arial");
    desenharTexto("Pressione R para reiniciar", 250, 300, _CORES.branco, "24px Arial");
}

# Reinicia o jogo
fun resetarJogo() {
    # Limpa os canos
    canos = list();
    
    # Reseta o pássaro
    passaro.x = 150;
    passaro.y = 300;
    passaro.velocidade_y = 0;
    passaro.rotacao = 0;
    
    # Reseta variáveis de jogo
    pontuacao = 0;
    game_over = false;
    tempo_ultimo_cano = 0;
}

# Inicia o jogo
dict jogo = iniciarJogo(); 