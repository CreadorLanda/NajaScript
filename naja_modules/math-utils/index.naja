// Math Utils Library for NajaScript
// Version 1.0.0 - Complete Mathematical Functions

println("MathUtils v1.0.0 loaded!");

// Mathematical constants
fun pi() {
    return 3.141592653589793;
}
export pi;

fun e() {
    return 2.718281828459045;
}
export e;

fun phi() {
    return 1.618033988749895; // Golden ratio
}
export phi;

// Basic functions
fun abs(num) {
    if (num < 0) {
        return -num;
    }
    return num;
}
export abs;

fun max(a, b) {
    if (a > b) {
        return a;
    }
    return b;
}
export max;

fun min(a, b) {
    if (a < b) {
        return a;
    }
    return b;
}
export min;

fun pow(base, exp) {
    if (exp == 0) {
        return 1.0;
    }
    
    float result = 1.0;
    int i = 0;
    while (i < exp) {
        result = result * base;
        i = i + 1;
    }
    return result;
}
export pow;

fun sqrt(num) {
    if (num < 0) {
        return 0.0;
    }
    
    if (num == 0.0) {
        return 0.0;
    }
    
    float x = num;
    int iterations = 0;
    while (iterations < 10) {
        x = (x + num / x) / 2.0;
        iterations = iterations + 1;
    }
    return x;
}
export sqrt;

// Trigonometric functions
fun sin(angle) {
    float x = angle;
    float result = x;
    float term = x;
    int i = 1;
    
    while (i < 8) {
        term = term * (-1.0) * x * x / ((2.0 * i) * (2.0 * i + 1.0));
        result = result + term;
        i = i + 1;
    }
    
    return result;
}
export sin;

fun cos(angle) {
    return sin(1.5707963267948966 - angle);
}
export cos;

fun tan(angle) {
    float cosValue = cos(angle);
    if (abs(cosValue) < 0.0001) {
        return 999999.0;
    }
    return sin(angle) / cosValue;
}
export tan;

// Conversion functions
fun deg2rad(degrees) {
    return degrees * pi() / 180.0;
}
export deg2rad;

fun rad2deg(radians) {
    return radians * 180.0 / pi();
}
export rad2deg;

// Rounding functions
fun floor(num) {
    if (num >= 0.0) {
        return num - (num % 1.0);
    } else {
        float result = num - (num % 1.0);
        if (num % 1.0 != 0.0) {
            result = result - 1.0;
        }
        return result;
    }
}
export floor;

fun ceil(num) {
    if (num % 1.0 == 0.0) {
        return num;
    }
    if (num > 0.0) {
        return floor(num) + 1.0;
    } else {
        return floor(num);
    }
}
export ceil;

fun round(num, places) {
    float multiplier = pow(10.0, places);
    return floor(num * multiplier + 0.5) / multiplier;
}
export round;

// Special functions
fun factorial(n) {
    if (n <= 1) {
        return 1;
    }
    
    int result = 1;
    int i = 2;
    while (i <= n) {
        result = result * i;
        i = i + 1;
    }
    return result;
}
export factorial;

fun fibonacci(n) {
    if (n <= 1) {
        return n;
    }
    
    int a = 0;
    int b = 1;
    int i = 2;
    
    while (i <= n) {
        int temp = a + b;
        a = b;
        b = temp;
        i = i + 1;
    }
    
    return b;
}
export fibonacci;

fun gcd(a, b) {
    a = abs(a);
    b = abs(b);
    
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    
    return a;
}
export gcd;

fun lcm(a, b) {
    return (a * b) / gcd(a, b);
}
export lcm;

fun isPrime(num) {
    if (num <= 1) {
        return false;
    }
    if (num <= 3) {
        return true;
    }
    if (num % 2 == 0 || num % 3 == 0) {
        return false;
    }
    
    int i = 5;
    while (i * i <= num) {
        if (num % i == 0 || num % (i + 2) == 0) {
            return false;
        }
        i = i + 6;
    }
    
    return true;
}
export isPrime;

// Statistical functions
fun mean(numbers) {
    if (numbers.length() == 0) {
        return 0.0;
    }
    
    float sum = 0.0;
    int i = 0;
    while (i < numbers.length()) {
        sum = sum + numbers.obter(i);
        i = i + 1;
    }
    
    return sum / numbers.length();
}
export mean;

fun sum(numbers) {
    float total = 0.0;
    int i = 0;
    while (i < numbers.length()) {
        total = total + numbers.obter(i);
        i = i + 1;
    }
    return total;
}
export sum;

// Info function
fun mathUtilsInfo() {
    dicionario info = {};
    info.add("name", "math-utils");
    info.add("version", "1.0.0");
    info.add("author", "NajaScript Community");
    info.add("description", "Mathematical utilities library for NajaScript");
    return info;
}
export mathUtilsInfo; 