#!/usr/bin/env python3
"""
Script para criar instaladores atualizados do NajaScript v1.2.0
Inclui: math-utils library, package manager, e todas as funcionalidades novas
"""

import os
import shutil
import tarfile
import json
from datetime import datetime

# Vers√£o atualizada
VERSION = "1.2.0"
PACKAGE_NAME = f"najascript-{VERSION}"

def create_directory_structure():
    """Cria a estrutura de diret√≥rios para o instalador Linux"""
    
    base_dir = f"{PACKAGE_NAME}-updated"
    linux_dir = f"{base_dir}/linux/{PACKAGE_NAME}-linux-structure"
    
    # Estrutura Linux
    directories = [
        f"{linux_dir}/DEBIAN",
        f"{linux_dir}/usr/bin",
        f"{linux_dir}/usr/share/najascript/assets",
        f"{linux_dir}/usr/share/najascript/modules", 
        f"{linux_dir}/usr/share/najascript/packages",
        f"{linux_dir}/usr/share/najascript/registry",
        f"{linux_dir}/usr/share/najascript/examples",
        f"{linux_dir}/usr/share/applications",
        f"{linux_dir}/usr/share/mime/packages"
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"‚úÖ Criado: {directory}")
    
    return base_dir, linux_dir

def create_debian_control_file(linux_dir):
    """Cria o arquivo control para o pacote Debian"""
    
    control_content = f"""Package: najascript
Version: {VERSION}
Section: devel
Priority: optional
Architecture: all
Depends: python3 (>= 3.6), python3-pip
Maintainer: NajaScript Team <team@najascript.dev>
Description: NajaScript Programming Language
 NajaScript √© uma linguagem de programa√ß√£o moderna e intuitiva
 com suporte a programa√ß√£o orientada a objetos, m√≥dulos,
 sistema de pacotes, e biblioteca matem√°tica completa.
 .
 Funcionalidades incluem:
 - Sintaxe intuitiva e f√°cil de aprender
 - Sistema de m√≥dulos e pacotes
 - Biblioteca math-utils com 24 fun√ß√µes matem√°ticas
 - Suporte a POO com classes e heran√ßa
 - Sistema de eventos e programa√ß√£o reativa
 - Desenvolvimento de jogos com NajaGame2D
 - Ferramentas de seguran√ßa com NajaHack
 - Package manager integrado
"""
    
    with open(f"{linux_dir}/DEBIAN/control", "w", encoding="utf-8") as f:
        f.write(control_content)
    
    print("‚úÖ Arquivo control criado")

def create_postinst_script(linux_dir):
    """Cria script de p√≥s-instala√ß√£o"""
    
    postinst_content = """#!/bin/bash
# Post-installation script for NajaScript

echo "üöÄ Configurando NajaScript..."

# Tornar execut√°veis acess√≠veis
chmod +x /usr/bin/najascript
chmod +x /usr/bin/naja
chmod +x /usr/bin/naja_pkg

# Atualizar banco de dados MIME
if command -v update-mime-database >/dev/null 2>&1; then
    update-mime-database /usr/share/mime
fi

# Atualizar cache de aplica√ß√µes
if command -v update-desktop-database >/dev/null 2>&1; then
    update-desktop-database /usr/share/applications
fi

echo "‚úÖ NajaScript v1.2.0 instalado com sucesso!"
echo "üì¶ Package manager dispon√≠vel: naja_pkg"
echo "üìö Biblioteca math-utils inclu√≠da"
echo ""
echo "Para come√ßar:"
echo "  najascript --help"
echo "  naja_pkg list"
echo ""
echo "Documenta√ß√£o: https://najascript.github.io"

exit 0
"""
    
    with open(f"{linux_dir}/DEBIAN/postinst", "w", encoding="utf-8") as f:
        f.write(postinst_content)
    
    os.chmod(f"{linux_dir}/DEBIAN/postinst", 0o755)
    print("‚úÖ Script postinst criado")

def create_executable_scripts(linux_dir):
    """Cria scripts execut√°veis"""
    
    # Script najascript principal
    najascript_content = """#!/usr/bin/env python3
import sys
import os
sys.path.insert(0, '/usr/share/najascript')
from najascript import main

if __name__ == "__main__":
    main()
"""
    
    # Script naja (alias)
    naja_content = """#!/usr/bin/env python3
import sys
import os
sys.path.insert(0, '/usr/share/najascript')
from najascript import main

if __name__ == "__main__":
    main()
"""
    
    # Script package manager
    naja_pkg_content = """#!/usr/bin/env python3
import sys
import os
sys.path.insert(0, '/usr/share/najascript')
from naja_github_package_manager import main

if __name__ == "__main__":
    main()
"""
    
    # Escrever scripts
    with open(f"{linux_dir}/usr/bin/najascript", "w", encoding="utf-8") as f:
        f.write(najascript_content)
    
    with open(f"{linux_dir}/usr/bin/naja", "w", encoding="utf-8") as f:
        f.write(naja_content)
        
    with open(f"{linux_dir}/usr/bin/naja_pkg", "w", encoding="utf-8") as f:
        f.write(naja_pkg_content)
    
    # Tornar execut√°veis
    os.chmod(f"{linux_dir}/usr/bin/najascript", 0o755)
    os.chmod(f"{linux_dir}/usr/bin/naja", 0o755)
    os.chmod(f"{linux_dir}/usr/bin/naja_pkg", 0o755)
    
    print("‚úÖ Scripts execut√°veis criados")

def create_desktop_file(linux_dir):
    """Cria arquivo .desktop para o menu"""
    
    desktop_content = """[Desktop Entry]
Name=NajaScript
Comment=NajaScript Programming Language IDE
Comment[pt]=Linguagem de Programa√ß√£o NajaScript
Exec=najascript
Icon=najascript
Terminal=true
Type=Application
Categories=Development;IDE;Programming;
MimeType=text/x-najascript;
Keywords=programming;development;najascript;naja;
StartupNotify=true
"""
    
    with open(f"{linux_dir}/usr/share/applications/najascript.desktop", "w", encoding="utf-8") as f:
        f.write(desktop_content)
    
    print("‚úÖ Arquivo .desktop criado")

def create_mime_type(linux_dir):
    """Cria tipo MIME para arquivos .naja"""
    
    mime_content = """<?xml version="1.0" encoding="UTF-8"?>
<mime-info xmlns="http://www.freedesktop.org/standards/shared-mime-info">
    <mime-type type="text/x-najascript">
        <comment>NajaScript source code</comment>
        <comment xml:lang="pt">C√≥digo fonte NajaScript</comment>
        <icon name="text-x-script"/>
        <glob pattern="*.naja"/>
        <glob pattern="*.ns"/>
    </mime-type>
</mime-info>
"""
    
    with open(f"{linux_dir}/usr/share/mime/packages/najascript.xml", "w", encoding="utf-8") as f:
        f.write(mime_content)
    
    print("‚úÖ Tipo MIME criado")

def copy_najascript_files(linux_dir):
    """Copia arquivos do NajaScript para o instalador"""
    
    share_dir = f"{linux_dir}/usr/share/najascript"
    
    # Arquivos principais
    main_files = [
        "najascript.py", "interpreter.py", "lexer.py", "parser_naja.py",
        "ast_nodes.py", "environment.py", "fs_module.py", "http_module.py",
        "naja_github_package_manager.py", "naja_bytecode.py", "jit_compiler.py"
    ]
    
    for file in main_files:
        if os.path.exists(file):
            shutil.copy2(file, share_dir)
            print(f"‚úÖ Copiado: {file}")
    
    # Copiar assets
    if os.path.exists("assets"):
        shutil.copytree("assets", f"{share_dir}/assets", dirs_exist_ok=True)
        print("‚úÖ Assets copiados")
    
    # Copiar m√≥dulos
    if os.path.exists("modules"):
        shutil.copytree("modules", f"{share_dir}/modules", dirs_exist_ok=True)
        print("‚úÖ M√≥dulos copiados")
    
    # Copiar registry
    if os.path.exists("registry"):
        shutil.copytree("registry", f"{share_dir}/registry", dirs_exist_ok=True)
        print("‚úÖ Registry copiado")
    
    # Copiar pacotes
    if os.path.exists("packages"):
        shutil.copytree("packages", f"{share_dir}/packages", dirs_exist_ok=True)
        print("‚úÖ Pacotes copiados")
    
    # Copiar exemplos selecionados
    examples_dir = f"{share_dir}/examples"
    example_files = [
        "hello_world.naja", "calculator.naja", "complete_math_test.naja",
        "teste_class.naja", "teste_najahack.naja", "flappy_bird_completo.naja"
    ]
    
    for example in example_files:
        if os.path.exists(f"exemplos/{example}"):
            shutil.copy2(f"exemplos/{example}", examples_dir)
            print(f"‚úÖ Exemplo copiado: {example}")

def create_readme(base_dir):
    """Cria README para o instalador"""
    
    readme_content = f"""# NajaScript v{VERSION} - Instaladores Atualizados

## üöÄ Novidades da Vers√£o {VERSION}

### ‚úÖ Novas Funcionalidades:
- **üßÆ Biblioteca math-utils**: 24 fun√ß√µes matem√°ticas completas
- **üì¶ Package Manager**: Sistema completo de gerenciamento de pacotes
- **üîß Ferramentas aprimoradas**: Novos m√≥dulos e exemplos
- **üìö Documenta√ß√£o atualizada**: Guias completos e exemplos pr√°ticos

### üì¶ Biblioteca Math Utils:
- Constantes matem√°ticas: pi(), e(), phi()
- Fun√ß√µes b√°sicas: abs(), max(), min(), pow(), sqrt()
- Trigonometria: sin(), cos(), tan(), deg2rad(), rad2deg()
- Estat√≠stica: mean(), sum()
- Fun√ß√µes especiais: factorial(), fibonacci(), gcd(), lcm(), isPrime()
- Arredondamento: floor(), ceil(), round()

### üõ†Ô∏è Package Manager:
- Instala√ß√£o de pacotes: `naja_pkg install package-name`
- Busca de pacotes: `naja_pkg search keyword`
- Listagem: `naja_pkg list`
- Registry integrado com GitHub

## üì• Instala√ß√£o

### Linux (Ubuntu/Debian):
```bash
# Baixar e instalar
wget https://github.com/NajaScript/Naja/releases/download/v{VERSION}/najascript-{VERSION}-linux.deb
sudo dpkg -i najascript-{VERSION}-linux.deb

# Resolver depend√™ncias se necess√°rio
sudo apt-get install -f
```

### Windows:
1. Baixar `NajaScript_Setup_v{VERSION}.exe`
2. Executar como administrador
3. Seguir instru√ß√µes do instalador

## üéØ Uso R√°pido

```bash
# Verificar instala√ß√£o
najascript --version

# Executar programa
najascript meu_programa.naja

# Gerenciar pacotes
naja_pkg list
naja_pkg install math-utils

# Usar biblioteca math-utils
```

```naja
import {{ pi, sqrt, factorial }} from "math-utils";

fun exemplo() {{
    float area = pi() * pow(5.0, 2);
    int fat = factorial(5);
    println("√Årea: " + area);
    println("5! = " + fat);
}}
```

## üîó Links √öteis

- **Documenta√ß√£o**: https://najascript.github.io
- **Reposit√≥rio**: https://github.com/NajaScript/Naja
- **Issues**: https://github.com/NajaScript/Naja/issues

## üìù Changelog v{VERSION}

- ‚úÖ Adicionada biblioteca math-utils completa
- ‚úÖ Sistema de package manager funcional
- ‚úÖ Registry de pacotes integrado
- ‚úÖ Novos exemplos e documenta√ß√£o
- ‚úÖ Melhorias na sintaxe e performance
- ‚úÖ Suporte aprimorado para Linux e Windows

---

**Feito com ‚ù§Ô∏è pela comunidade NajaScript**
"""
    
    with open(f"{base_dir}/README.md", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    print("‚úÖ README criado")

def create_linux_tarball(base_dir, linux_dir):
    """Cria arquivo tar.gz para Linux"""
    
    tarball_name = f"{base_dir}/linux/{PACKAGE_NAME}-linux-structure.tar.gz"
    
    with tarfile.open(tarball_name, "w:gz") as tar:
        tar.add(linux_dir, arcname=f"{PACKAGE_NAME}-linux-structure")
    
    print(f"‚úÖ Tarball criado: {tarball_name}")
    
    # Informa√ß√µes do pacote
    size = os.path.getsize(tarball_name)
    print(f"üì¶ Tamanho: {size:,} bytes ({size/1024/1024:.1f} MB)")

def create_installation_guide(base_dir):
    """Cria guia de instala√ß√£o detalhado"""
    
    guide_content = f"""# Guia de Instala√ß√£o - NajaScript v{VERSION}

## üêß Linux (Ubuntu/Debian)

### M√©todo 1: Instala√ß√£o via .deb (Recomendado)

```bash
# 1. Baixar o pacote
wget https://github.com/NajaScript/Naja/releases/download/v{VERSION}/najascript-{VERSION}-linux.deb

# 2. Instalar
sudo dpkg -i najascript-{VERSION}-linux.deb

# 3. Resolver depend√™ncias (se necess√°rio)
sudo apt-get install -f

# 4. Verificar instala√ß√£o
najascript --version
naja_pkg --help
```

### M√©todo 2: Instala√ß√£o manual

```bash
# 1. Extrair arquivos
tar -xzf najascript-{VERSION}-linux-structure.tar.gz

# 2. Copiar arquivos
sudo cp -r najascript-{VERSION}-linux-structure/usr/* /usr/

# 3. Atualizar permiss√µes
sudo chmod +x /usr/bin/najascript
sudo chmod +x /usr/bin/naja
sudo chmod +x /usr/bin/naja_pkg

# 4. Atualizar MIME types
sudo update-mime-database /usr/share/mime
sudo update-desktop-database /usr/share/applications
```

## ü™ü Windows

### Instala√ß√£o Autom√°tica

1. **Baixar**: `NajaScript_Setup_v{VERSION}.exe`
2. **Executar como Administrador**
3. **Seguir o assistente de instala√ß√£o**
4. **Reiniciar o sistema** (se solicitado)

### Verifica√ß√£o

```cmd
# Prompt de Comando ou PowerShell
najascript --version
naja_pkg list
```

## üß™ Teste da Instala√ß√£o

### Teste B√°sico
```bash
# Criar arquivo de teste
echo 'println("Ol√°, NajaScript v{VERSION}!");' > teste.naja

# Executar
najascript teste.naja
```

### Teste do Package Manager
```bash
# Listar pacotes dispon√≠veis
naja_pkg list

# Instalar math-utils
naja_pkg install math-utils

# Testar biblioteca
echo 'import {{ pi, sqrt }} from "math-utils"; println("Pi: " + pi()); println("‚àö16: " + sqrt(16.0));' > teste_math.naja
najascript teste_math.naja
```

## üîß Resolu√ß√£o de Problemas

### Linux

**Erro: "comando n√£o encontrado"**
```bash
# Verificar se est√° no PATH
echo $PATH | grep -q "/usr/bin" && echo "PATH OK" || echo "Adicionar /usr/bin ao PATH"

# Adicionar ao PATH (se necess√°rio)
echo 'export PATH="/usr/bin:$PATH"' >> ~/.bashrc
source ~/.bashrc
```

**Erro de depend√™ncias**
```bash
# Instalar Python 3.6+
sudo apt-get update
sudo apt-get install python3 python3-pip

# Verificar vers√£o
python3 --version
```

### Windows

**Erro: "n√£o √© reconhecido como comando"**
1. Verificar se NajaScript est√° no PATH do sistema
2. Reiniciar o Prompt de Comando
3. Executar como Administrador

**Erro de permiss√µes**
1. Executar Prompt como Administrador
2. Verificar antiv√≠rus (pode bloquear)
3. Adicionar exce√ß√£o para NajaScript

## üìö Primeiros Passos

### 1. Hello World
```naja
fun main() {{
    println("Ol√°, mundo!");
}}

main();
```

### 2. Usando math-utils
```naja
import {{ pi, factorial, isPrime }} from "math-utils";

fun demonstracao() {{
    // Constantes
    println("Pi: " + pi());
    
    // Fatorial
    println("5! = " + factorial(5));
    
    // N√∫meros primos
    println("17 √© primo: " + isPrime(17));
}}

demonstracao();
```

### 3. Package Manager
```bash
# Ver pacotes instalados
naja_pkg list

# Procurar pacotes
naja_pkg search math

# Instalar pacote
naja_pkg install nome-do-pacote

# Informa√ß√µes do sistema
naja_pkg info
```

## üÜò Suporte

- **Documenta√ß√£o**: https://najascript.github.io
- **Issues**: https://github.com/NajaScript/Naja/issues
- **Discuss√µes**: https://github.com/NajaScript/Naja/discussions

---

**NajaScript v{VERSION} - Desenvolvido com ‚ù§Ô∏è pela comunidade**
"""
    
    with open(f"{base_dir}/INSTALLATION_GUIDE.md", "w", encoding="utf-8") as f:
        f.write(guide_content)
    
    print("‚úÖ Guia de instala√ß√£o criado")

def main():
    """Fun√ß√£o principal"""
    
    print(f"üöÄ Criando instaladores atualizados NajaScript v{VERSION}")
    print("=" * 60)
    
    # Criar estrutura
    base_dir, linux_dir = create_directory_structure()
    
    # Criar arquivos de configura√ß√£o
    create_debian_control_file(linux_dir)
    create_postinst_script(linux_dir)
    create_executable_scripts(linux_dir)
    create_desktop_file(linux_dir)
    create_mime_type(linux_dir)
    
    # Copiar arquivos do NajaScript
    copy_najascript_files(linux_dir)
    
    # Criar documenta√ß√£o
    create_readme(base_dir)
    create_installation_guide(base_dir)
    
    # Criar tarball
    create_linux_tarball(base_dir, linux_dir)
    
    print("=" * 60)
    print(f"‚úÖ Instaladores criados com sucesso!")
    print(f"üìÅ Diret√≥rio: {base_dir}")
    print(f"üì¶ Vers√£o: {VERSION}")
    print(f"üêß Linux: {base_dir}/linux/")
    print(f"üìö Docs: {base_dir}/README.md")
    print(f"üîß Guia: {base_dir}/INSTALLATION_GUIDE.md")
    
    print("\nüéØ Pr√≥ximos passos:")
    print("1. Testar instalador Linux")
    print("2. Criar execut√°vel Windows")
    print("3. Fazer upload para GitHub Releases")
    print("4. Atualizar site de documenta√ß√£o")

if __name__ == "__main__":
    main() 