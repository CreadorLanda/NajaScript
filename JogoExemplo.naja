# Jogo Simples em NajaScript usando a biblioteca NajaGame2D
# Primeiro, importamos a biblioteca (na implementação real)
# import "NajaGame2D.naja";

# ==========================================================
# JOGO: NAJA RUNNER - Um jogo de plataforma simples
# ==========================================================

# Configurações do jogo
int LARGURA_TELA = 800;
int ALTURA_TELA = 600;
int GRAVIDADE = 980;  # pixels por segundo ao quadrado
int FORCA_PULO = 500;
int VELOCIDADE_JOGADOR = 250;

# Inicializa o jogo
fun iniciarNajaRunner() {
    # Cria o objeto do jogo
    dict jogo = initGame(LARGURA_TELA, ALTURA_TELA, "Naja Runner");
    
    # Carrega sprites
    dict spritePersonagem = criarSprite("personagem.png", 64, 64);
    dict spritePlataforma = criarSprite("plataforma.png", 128, 32);
    dict spriteInimigo = criarSprite("inimigo.png", 48, 48);
    dict spriteMoeda = criarSprite("moeda.png", 32, 32);
    dict spriteFundo = criarSprite("fundo.png", LARGURA_TELA, ALTURA_TELA);
    
    # Carrega áudio
    string somPulo = "pulo.wav";
    string somColeta = "coleta.wav";
    string somDano = "dano.wav";
    string musicaFundo = "musica_jogo.mp3";
    
    # Cria o objeto jogador com características específicas para um jogo de plataforma
    dict jogador = criarObjeto("jogador", 100, 100, spritePersonagem);
    jogador.velocidade_x = 0;
    jogador.velocidade_y = 0;
    jogador.no_chao = false;
    jogador.pontos = 0;
    jogador.vidas = 3;
    
    # Variáveis para controle do jogo usando flux (reatividade)
    flux pontuacao_texto = "Pontos: " + jogador.pontos;
    flux vidas_texto = "Vidas: " + jogador.vidas;
    
    # ==========================================================
    # FUNÇÕES DE ATUALIZAÇÃO (LÓGICA DO JOGO)
    # ==========================================================
    
    # Atualização da cena principal
    fun atualizarJogo(dict game, float delta) {
        forin (objeto in game.cenas.get(game.cena_atual).objetos) {
            # Atualiza posições
            atualizarObjeto(objeto, delta);
            
            # Lógica específica para o jogador
            if (objeto.nome == "jogador") {
                # Movimento horizontal
                if (teclaEstaPressionada(game, "ArrowRight")) {
                    objeto.velocidade_x = VELOCIDADE_JOGADOR;
                } elif (teclaEstaPressionada(game, "ArrowLeft")) {
                    objeto.velocidade_x = -VELOCIDADE_JOGADOR;
                } else {
                    objeto.velocidade_x = 0;
                }
                
                # Gravidade
                if (!objeto.no_chao) {
                    objeto.velocidade_y = objeto.velocidade_y + (GRAVIDADE * delta);
                }
                
                # Pulo
                if (teclaEstaPressionada(game, "Space") && objeto.no_chao) {
                    objeto.velocidade_y = -FORCA_PULO;
                    objeto.no_chao = false;
                    tocarSom(somPulo);
                }
                
                # Limites da tela
                if (objeto.x < 0) {
                    objeto.x = 0;
                }
                if (objeto.x + objeto.largura > LARGURA_TELA) {
                    objeto.x = LARGURA_TELA - objeto.largura;
                }
                if (objeto.y + objeto.altura > ALTURA_TELA) {
                    objeto.y = ALTURA_TELA - objeto.altura;
                    objeto.velocidade_y = 0;
                    objeto.no_chao = true;
                }
                
                # Verifica colisões com plataformas
                forin (outro_objeto in game.cenas.get(game.cena_atual).objetos) {
                    if (outro_objeto.nome.indexOf("plataforma") == 0) {
                        if (verificarColisao(objeto, outro_objeto)) {
                            # Verifica se está caindo e acima da plataforma
                            if (objeto.velocidade_y > 0 && 
                                (objeto.y + objeto.altura - objeto.velocidade_y * delta) <= outro_objeto.y) {
                                objeto.y = outro_objeto.y - objeto.altura;
                                objeto.velocidade_y = 0;
                                objeto.no_chao = true;
                            }
                        }
                    }
                    
                    # Coleta de moedas
                    if (outro_objeto.nome.indexOf("moeda") == 0 && outro_objeto.visivel) {
                        if (verificarColisao(objeto, outro_objeto)) {
                            outro_objeto.visivel = false;
                            objeto.pontos = objeto.pontos + 10;
                            tocarSom(somColeta);
                        }
                    }
                    
                    # Colisão com inimigos
                    if (outro_objeto.nome.indexOf("inimigo") == 0) {
                        if (verificarColisao(objeto, outro_objeto)) {
                            objeto.vidas = objeto.vidas - 1;
                            objeto.x = 100;  # Reposiciona
                            objeto.y = 100;
                            tocarSom(somDano);
                            
                            if (objeto.vidas <= 0) {
                                trocarCena(game, "gameOver");
                            }
                        }
                    }
                }
                
                # Atualiza texto de pontuação e vidas (aproveitando reatividade)
                pontuacao_texto = "Pontos: " + objeto.pontos;
                vidas_texto = "Vidas: " + objeto.vidas;
            }
            
            # Move inimigos de um lado para outro
            if (objeto.nome.indexOf("inimigo") == 0) {
                # Movimentação simples dos inimigos
                if (objeto.direcao == "direita") {
                    objeto.velocidade_x = 100;
                    if (objeto.x > LARGURA_TELA - 100) {
                        objeto.direcao = "esquerda";
                    }
                } else {
                    objeto.velocidade_x = -100;
                    if (objeto.x < 100) {
                        objeto.direcao = "direita";
                    }
                }
            }
        }
    }
    
    # Renderização da cena principal
    fun renderizarJogo(dict game) {
        # Desenha o fundo primeiro
        # Na implementação real desenharíamos o fundo
        
        # Renderiza todos os objetos
        forin (objeto in game.cenas.get(game.cena_atual).objetos) {
            renderizarObjeto(game, objeto);
        }
        
        # Desenha UI
        # Na implementação real, renderizaríamos texto para mostrar os pontos e vidas
        println(pontuacao_texto);
        println(vidas_texto);
    }
    
    # Lógica da tela de game over
    fun atualizarGameOver(dict game, float delta) {
        if (teclaEstaPressionada(game, "Enter")) {
            # Reinicia o jogo
            trocarCena(game, "nivel1");
            # Restaura valores do jogador
            dict jogador = findObjeto(game.cenas.get("nivel1"), "jogador");
            jogador.vidas = 3;
            jogador.pontos = 0;
        }
    }
    
    # Renderização da tela de game over
    fun renderizarGameOver(dict game) {
        # Na implementação real, mostraríamos texto e instruções
        println("GAME OVER!");
        println("Pressione ENTER para jogar novamente");
    }
    
    # ==========================================================
    # CRIAÇÃO DE NÍVEIS
    # ==========================================================
    
    # Função para encontrar um objeto em uma cena pelo nome
    fun findObjeto(dict cena, string nome) {
        forin (objeto in cena.objetos) {
            if (objeto.nome == nome) {
                return objeto;
            }
        }
        return null;
    }
    
    # Cria a cena do nível 1
    fun criarNivel1() {
        dict nivel = criarCena("nivel1", atualizarJogo, renderizarJogo);
        
        # Adiciona jogador
        adicionarObjetoACena(nivel, jogador);
        
        # Adiciona plataformas
        dict plataforma1 = criarObjeto("plataforma1", 100, 400, spritePlataforma);
        dict plataforma2 = criarObjeto("plataforma2", 300, 350, spritePlataforma);
        dict plataforma3 = criarObjeto("plataforma3", 500, 300, spritePlataforma);
        dict plataforma4 = criarObjeto("plataforma4", 700, 250, spritePlataforma);
        dict plataforma5 = criarObjeto("plataforma5", 0, ALTURA_TELA - 30, spritePlataforma);
        plataforma5.largura = LARGURA_TELA;  # Chão
        
        adicionarObjetoACena(nivel, plataforma1);
        adicionarObjetoACena(nivel, plataforma2);
        adicionarObjetoACena(nivel, plataforma3);
        adicionarObjetoACena(nivel, plataforma4);
        adicionarObjetoACena(nivel, plataforma5);
        
        # Adiciona moedas
        for (int i = 0; i < 5; i = i + 1) {
            dict moeda = criarObjeto("moeda" + i, 150 + i * 120, 200, spriteMoeda);
            adicionarObjetoACena(nivel, moeda);
        }
        
        # Adiciona inimigos
        dict inimigo1 = criarObjeto("inimigo1", 400, 270, spriteInimigo);
        inimigo1.direcao = "direita";
        
        dict inimigo2 = criarObjeto("inimigo2", 600, 220, spriteInimigo);
        inimigo2.direcao = "esquerda";
        
        adicionarObjetoACena(nivel, inimigo1);
        adicionarObjetoACena(nivel, inimigo2);
        
        return nivel;
    }
    
    # Cria a cena de game over
    fun criarTelaGameOver() {
        dict gameOver = criarCena("gameOver", atualizarGameOver, renderizarGameOver);
        return gameOver;
    }
    
    # ==========================================================
    # INICIALIZAÇÃO DO JOGO
    # ==========================================================
    
    # Cria e adiciona as cenas ao jogo
    dict nivel1 = criarNivel1();
    dict telaGameOver = criarTelaGameOver();
    
    adicionarCena(jogo, nivel1);
    adicionarCena(jogo, telaGameOver);
    
    # Toca música de fundo
    tocarMusicaFundo(musicaFundo, true);
    
    # Monitora eventos de pontuação usando onChange
    onChange("pontuacao_texto", printChange);
    
    # Inicia o jogo na cena de nível 1
    trocarCena(jogo, "nivel1");
    startGame(jogo);
    
    return jogo;
}

# ==========================================================
# EXECUÇÃO PRINCIPAL
# ==========================================================

# Inicia o jogo
# iniciarNajaRunner(); 