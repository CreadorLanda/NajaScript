// Teste completo de Orientação a Objetos em NajaScript

// 1. Definição básica de classe
class Pessoa {
    public string nome;
    public int idade;
    
    constructor(string nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }
    
    public string apresentar() {
        return "Olá, eu sou " + this.nome + " e tenho " + this.idade + " anos.";
    }
    
    public void fazerAniversario() {
        this.idade = this.idade + 1;
    }
}

// 2. Herança
class Estudante extends Pessoa {
    public string curso;
    
    constructor(string nome, int idade, string curso) {
        super(nome, idade);
        this.curso = curso;
    }
    
    public string apresentar() {
        return super.apresentar() + " Estudo " + this.curso + ".";
    }
    
    public string estudar() {
        return this.nome + " está estudando " + this.curso;
    }
}

// 3. Definição de interface
interface Animal {
    string fazerSom();
    void mover();
}

// 4. Implementação de interface
class Cachorro implements Animal {
    public string nome;
    
    constructor(string nome) {
        this.nome = nome;
    }
    
    public string fazerSom() {
        return "Au au!";
    }
    
    public void mover() {
        println(this.nome + " está correndo");
    }
}

// Função principal para testar
fun main() {
    println("=== Testando Classes e Objetos ===");
    
    // Criando instâncias
    Pessoa pessoa1 = new Pessoa("Maria", 30);
    println(pessoa1.apresentar());
    println("Nome: " + pessoa1.nome);
    println("Idade: " + pessoa1.idade);
    
    // Modificando atributos
    pessoa1.nome = "Maria Silva";
    pessoa1.idade = 31;
    println("\nApós modificação:");
    println("Nome: " + pessoa1.nome);
    println("Idade: " + pessoa1.idade);
    
    // Chamando métodos
    pessoa1.fazerAniversario();
    println("\nApós aniversário:");
    println("Idade: " + pessoa1.idade);
    println(pessoa1.apresentar());
    
    // Testando herança
    println("\n=== Testando Herança ===");
    Estudante estudante1 = new Estudante("João", 20, "Computação");
    println(estudante1.apresentar());
    println(estudante1.estudar());
    println("Nome do estudante: " + estudante1.nome);
    println("Curso: " + estudante1.curso);
    
    estudante1.fazerAniversario();
    println("\nApós aniversário do estudante:");
    println("Idade: " + estudante1.idade);
    
    // Testando interface
    println("\n=== Testando Interface ===");
    Cachorro cachorro1 = new Cachorro("Rex");
    println("Som do cachorro: " + cachorro1.fazerSom());
    cachorro1.mover();
    
    // 5. Testando polimorfismo
    println("\n=== Testando Polimorfismo ===");
    Pessoa pessoa2 = new Estudante("Ana", 22, "Física");
    println(pessoa2.apresentar());  // Deve chamar o método da classe Estudante
    
    println("\nTestes de OOP concluídos!");
}

// Executar o programa principal
main(); 