# NajaGame2D - Biblioteca para Jogos 2D com NajaScript
# Implementação real usando Canvas HTML5

# ==========================================================
# VARIÁVEIS GLOBAIS E UTILITÁRIOS
# ==========================================================

# Canvas e contexto de renderização
string _CANVAS_ID = "naja-game-canvas";
any _ctx = null;  # Contexto do canvas

# Recursos carregados
dict _recursos_carregados = dict();
int _recursos_total = 0;
int _recursos_carregados_contador = 0;

# ==========================================================
# CLASSE GAME - Núcleo do motor de jogos
# ==========================================================

# Inicializa o motor de jogos
fun initGame(int largura, int altura, string titulo) {
    dict game = {
        largura: largura,
        altura: altura,
        titulo: titulo,
        cena_atual: "principal",
        cenas: dict(),
        sprites: dict(),
        teclas_pressionadas: dict(),
        mouse_x: 0,
        mouse_y: 0,
        mouse_clicado: false,
        delta_tempo: 0,
        ultimo_tempo: 0,
        rodando: false,
        frame_id: 0,
        recursos_carregados: false
    };
    
    # Configurações do canvas
    setupCanvas(game);
    
    # Configuração de eventos do teclado e mouse
    setupInputs(game);
    
    return game;
}

# Função para verificar se todos os recursos foram carregados
fun todosRecursosCarregados() {
    return _recursos_carregados_contador >= _recursos_total;
}

# Cria e configura o canvas HTML
fun setupCanvas(dict game) {
    # Cria elemento canvas e adiciona ao documento
    __criarElementoCanvas(game.largura, game.altura, _CANVAS_ID);
    
    # Obtém o contexto 2D para desenho
    _ctx = __obterContextoCanvas(_CANVAS_ID);
    
    # Define o título da página
    __definirTituloPagina(game.titulo);
    
    println("Canvas criado com dimensões " + game.largura + "x" + game.altura);
    println("Título: " + game.titulo);
}

# Funções para manipulação do DOM (HTMLCanvas)
fun __criarElementoCanvas(int largura, int altura, string id) {
    # Cria elemento canvas e configura suas propriedades
    __eval("
        var canvas = document.createElement('canvas');
        canvas.id = '" + id + "';
        canvas.width = " + largura + ";
        canvas.height = " + altura + ";
        canvas.style.border = '1px solid black';
        canvas.style.display = 'block';
        canvas.style.margin = '0 auto';
        document.body.appendChild(canvas);
    ");
}

fun __obterContextoCanvas(string id) {
    # Obtém o contexto 2D para desenho
    return __eval("document.getElementById('" + id + "').getContext('2d')");
}

fun __definirTituloPagina(string titulo) {
    # Define o título da página
    __eval("document.title = '" + titulo + "'");
}

# Configura eventos de input (teclado e mouse)
fun setupInputs(dict game) {
    # Eventos de teclado
    __configurarEventosTeclado(game);
    
    # Eventos de mouse
    __configurarEventosMouse(game);
    
    println("Eventos de teclado e mouse configurados");
}

fun __configurarEventosTeclado(dict game) {
    # Configura eventos keydown e keyup para detectar teclas pressionadas
    __eval("
        document.addEventListener('keydown', function(event) {
            window.najaGame.teclas_pressionadas[event.key] = true;
            event.preventDefault();
        });
        
        document.addEventListener('keyup', function(event) {
            window.najaGame.teclas_pressionadas[event.key] = false;
            event.preventDefault();
        });
        
        // Referência global para o objeto do jogo
        window.najaGame = " + game + ";
    ");
}

fun __configurarEventosMouse(dict game) {
    # Configura eventos de mouse para rastrear posição e cliques
    __eval("
        var canvas = document.getElementById('" + _CANVAS_ID + "');
        
        canvas.addEventListener('mousemove', function(event) {
            var rect = canvas.getBoundingClientRect();
            window.najaGame.mouse_x = event.clientX - rect.left;
            window.najaGame.mouse_y = event.clientY - rect.top;
        });
        
        canvas.addEventListener('mousedown', function(event) {
            window.najaGame.mouse_clicado = true;
        });
        
        canvas.addEventListener('mouseup', function(event) {
            window.najaGame.mouse_clicado = false;
        });
    ");
}

# Inicia o loop principal do jogo
fun startGame(dict game) {
    game.rodando = true;
    game.ultimo_tempo = currentTime();
    
    # Registra o jogo globalmente para acesso nas callbacks do navegador
    __eval("window.najaGame = " + game);
    
    # Inicia o loop principal usando requestAnimationFrame
    __iniciarLoopAnimacao();
    
    println("Jogo iniciado!");
}

# Função usada para iniciar o loop de animação
fun __iniciarLoopAnimacao() {
    __eval("
        function gameLoop(timestamp) {
            if (!window.najaGame.rodando) return;
            
            // Calcula o delta tempo
            var agora = timestamp;
            window.najaGame.delta_tempo = (agora - window.najaGame.ultimo_tempo) / 1000.0;
            window.najaGame.ultimo_tempo = agora;
            
            // Limpa a tela
            var ctx = document.getElementById('" + _CANVAS_ID + "').getContext('2d');
            ctx.clearRect(0, 0, window.najaGame.largura, window.najaGame.altura);
            
            // Só processa se todos os recursos estiverem carregados
            if (window.todosRecursosCarregados) {
                // Obtém a cena atual
                var cena = window.najaGame.cenas[window.najaGame.cena_atual];
                
                if (cena && cena.atualizar) {
                    // Executa a função de atualização da cena
                    cena.atualizar(window.najaGame, window.najaGame.delta_tempo);
                }
                
                if (cena && cena.renderizar) {
                    // Executa a função de renderização da cena
                    cena.renderizar(window.najaGame);
                }
            }
            
            // Continua o loop se o jogo estiver rodando
            if (window.najaGame.rodando) {
                window.najaGame.frame_id = requestAnimationFrame(gameLoop);
            }
        }
        
        // Inicia o loop principal
        window.najaGame.frame_id = requestAnimationFrame(gameLoop);
        window.todosRecursosCarregados = " + todosRecursosCarregados + ";
    ");
}

# Função auxiliar para obter o tempo atual em milissegundos
fun currentTime() {
    # Retorna o timestamp atual usando performance.now()
    return __eval("performance.now()");
}

# Limpa a tela
fun limparTela(dict game) {
    # Limpa o canvas inteiro
    _ctx.clearRect(0, 0, game.largura, game.altura);
}

# Para o jogo
fun stopGame(dict game) {
    game.rodando = false;
    
    # Cancela o requestAnimationFrame
    __eval("
        if (window.najaGame && window.najaGame.frame_id) {
            cancelAnimationFrame(window.najaGame.frame_id);
        }
    ");
    
    println("Jogo parado");
}

# ==========================================================
# GERENCIAMENTO DE CENAS
# ==========================================================

# Cria uma nova cena
fun criarCena(string nome, fun atualizar, fun renderizar) {
    dict cena = {
        nome: nome,
        atualizar: atualizar,
        renderizar: renderizar,
        objetos: list()
    };
    return cena;
}

# Adiciona uma cena ao jogo
fun adicionarCena(dict game, dict cena) {
    game.cenas.add(cena.nome, cena);
    println("Cena '" + cena.nome + "' adicionada ao jogo");
}

# Troca para uma cena específica
fun trocarCena(dict game, string nome_cena) {
    if (game.cenas.get(nome_cena) != null) {
        game.cena_atual = nome_cena;
        println("Trocado para cena: " + nome_cena);
    } else {
        println("Erro: Cena '" + nome_cena + "' não encontrada");
    }
}

# ==========================================================
# CARREGAMENTO DE RECURSOS
# ==========================================================

# Carrega uma imagem e retorna quando estiver pronta
fun carregarImagem(string caminho) {
    _recursos_total = _recursos_total + 1;
    
    # Cria elemento de imagem e configura
    any imagem = __eval("
        var img = new Image();
        img.src = '" + caminho + "';
        img.onload = function() {
            window._recursos_carregados['" + caminho + "'] = true;
            window._recursos_carregados_contador++;
        };
        img.onerror = function() {
            console.error('Erro ao carregar imagem: " + caminho + "');
        };
        img;
    ");
    
    # Registra variáveis globalmente para acesso nos callbacks
    __eval("
        window._recursos_carregados = " + _recursos_carregados + ";
        window._recursos_carregados_contador = " + _recursos_carregados_contador + ";
        window._recursos_total = " + _recursos_total + ";
    ");
    
    return imagem;
}

# Carrega um arquivo de áudio e retorna quando estiver pronto
fun carregarAudio(string caminho) {
    _recursos_total = _recursos_total + 1;
    
    # Cria elemento de áudio e configura
    any audio = __eval("
        var audio = new Audio();
        audio.src = '" + caminho + "';
        audio.oncanplaythrough = function() {
            window._recursos_carregados['" + caminho + "'] = true;
            window._recursos_carregados_contador++;
        };
        audio.onerror = function() {
            console.error('Erro ao carregar áudio: " + caminho + "');
        };
        audio;
    ");
    
    # Registra variáveis globalmente para acesso nos callbacks
    __eval("
        window._recursos_carregados = " + _recursos_carregados + ";
        window._recursos_carregados_contador = " + _recursos_carregados_contador + ";
        window._recursos_total = " + _recursos_total + ";
    ");
    
    return audio;
}

# ==========================================================
# SPRITES E OBJETOS DO JOGO
# ==========================================================

# Cria um sprite (imagem 2D)
fun criarSprite(string caminho, int largura, int altura) {
    # Carrega a imagem
    any imagem = carregarImagem(caminho);
    
    dict sprite = {
        caminho: caminho,
        imagem: imagem,
        largura: largura,
        altura: altura,
        frame_atual: 0,
        total_frames: 1,
        tempo_animacao: 0,
        intervalo_frame: 0.1,  # 100ms entre frames por padrão
        animacao_ativa: false,
        sprite_sheet: false,
        frames_por_linha: 1
    };
    
    println("Sprite criado: " + caminho);
    
    return sprite;
}

# Configura uma sprite sheet (imagem com vários frames)
fun configurarSpriteSheet(dict sprite, int total_frames, int frames_por_linha, float intervalo_frame) {
    sprite.total_frames = total_frames;
    sprite.frames_por_linha = frames_por_linha > 0 ? frames_por_linha : 1;
    sprite.intervalo_frame = intervalo_frame;
    sprite.sprite_sheet = true;
    sprite.animacao_ativa = true;
    
    # Calcula largura e altura de cada frame
    sprite.frame_largura = sprite.largura / sprite.frames_por_linha;
    sprite.frame_altura = sprite.altura / Math.ceil(sprite.total_frames / sprite.frames_por_linha);
    
    return sprite;
}

# Atualiza a animação de um sprite
fun atualizarAnimacao(dict sprite, float delta_tempo) {
    if (!sprite.animacao_ativa || sprite.total_frames <= 1) {
        return;
    }
    
    sprite.tempo_animacao = sprite.tempo_animacao + delta_tempo;
    
    if (sprite.tempo_animacao >= sprite.intervalo_frame) {
        sprite.frame_atual = (sprite.frame_atual + 1) % sprite.total_frames;
        sprite.tempo_animacao = 0;
    }
}

# Carrega um sprite no jogo
fun carregarSprite(dict game, string nome, dict sprite) {
    game.sprites.add(nome, sprite);
    println("Sprite '" + nome + "' carregado");
}

# Cria um objeto de jogo
fun criarObjeto(string nome, int x, int y, dict sprite) {
    dict objeto = {
        nome: nome,
        x: x,
        y: y,
        largura: sprite.frame_largura || sprite.largura,
        altura: sprite.frame_altura || sprite.altura,
        velocidade_x: 0,
        velocidade_y: 0,
        sprite: sprite,
        colisor: true,
        visivel: true,
        rotacao: 0,
        escala_x: 1,
        escala_y: 1,
        centro_x: (sprite.frame_largura || sprite.largura) / 2,
        centro_y: (sprite.frame_altura || sprite.altura) / 2
    };
    return objeto;
}

# Adiciona um objeto a uma cena
fun adicionarObjetoACena(dict cena, dict objeto) {
    cena.objetos.add(objeto);
    println("Objeto '" + objeto.nome + "' adicionado à cena '" + cena.nome + "'");
}

# Renderiza um objeto
fun renderizarObjeto(dict game, dict objeto) {
    if (!objeto.visivel) {
        return;
    }
    
    # Salva o estado atual do contexto
    _ctx.save();
    
    # Aplica transformações (rotação, escala)
    _ctx.translate(objeto.x + objeto.centro_x, objeto.y + objeto.centro_y);
    
    if (objeto.rotacao != 0) {
        _ctx.rotate(objeto.rotacao * Math.PI / 180);  # Converte graus para radianos
    }
    
    if (objeto.escala_x != 1 || objeto.escala_y != 1) {
        _ctx.scale(objeto.escala_x, objeto.escala_y);
    }
    
    # Desenhando o sprite
    if (objeto.sprite.sprite_sheet) {
        # Calcula a posição do frame atual na sprite sheet
        int frame_linha = objeto.sprite.frame_atual % objeto.sprite.frames_por_linha;
        int frame_coluna = Math.floor(objeto.sprite.frame_atual / objeto.sprite.frames_por_linha);
        
        int sx = frame_linha * objeto.sprite.frame_largura;
        int sy = frame_coluna * objeto.sprite.frame_altura;
        
        # Desenha apenas o frame atual da sprite sheet
        _ctx.drawImage(
            objeto.sprite.imagem,
            sx, sy,
            objeto.sprite.frame_largura, objeto.sprite.frame_altura,
            -objeto.centro_x, -objeto.centro_y,
            objeto.largura, objeto.altura
        );
    } else {
        # Desenha o sprite inteiro
        _ctx.drawImage(
            objeto.sprite.imagem,
            -objeto.centro_x, -objeto.centro_y,
            objeto.largura, objeto.altura
        );
    }
    
    # Restaura o estado do contexto
    _ctx.restore();
}

# Desenha texto na tela
fun desenharTexto(string texto, int x, int y, string cor, string fonte) {
    _ctx.fillStyle = cor || "black";
    _ctx.font = fonte || "20px Arial";
    _ctx.fillText(texto, x, y);
}

# Desenha formas geométricas
fun desenharRetangulo(int x, int y, int largura, int altura, string cor, bool preenchido) {
    _ctx.fillStyle = cor;
    _ctx.strokeStyle = cor;
    
    if (preenchido) {
        _ctx.fillRect(x, y, largura, altura);
    } else {
        _ctx.strokeRect(x, y, largura, altura);
    }
}

fun desenharCirculo(int x, int y, int raio, string cor, bool preenchido) {
    _ctx.fillStyle = cor;
    _ctx.strokeStyle = cor;
    
    _ctx.beginPath();
    _ctx.arc(x, y, raio, 0, Math.PI * 2);
    
    if (preenchido) {
        _ctx.fill();
    } else {
        _ctx.stroke();
    }
}

# Atualiza a física de um objeto
fun atualizarObjeto(dict objeto, float delta_tempo) {
    # Atualiza posição baseada na velocidade
    objeto.x = objeto.x + (objeto.velocidade_x * delta_tempo);
    objeto.y = objeto.y + (objeto.velocidade_y * delta_tempo);
    
    # Atualiza animação do sprite
    if (objeto.sprite.animacao_ativa) {
        atualizarAnimacao(objeto.sprite, delta_tempo);
    }
}

# ==========================================================
# SISTEMA DE COLISÕES
# ==========================================================

# Verifica colisão entre dois objetos (AABB - Axis-Aligned Bounding Box)
fun verificarColisao(dict objeto1, dict objeto2) {
    if (!objeto1.colisor || !objeto2.colisor) {
        return false;
    }
    
    bool colisao_x = (objeto1.x + objeto1.largura >= objeto2.x) && 
                    (objeto2.x + objeto2.largura >= objeto1.x);
                    
    bool colisao_y = (objeto1.y + objeto1.altura >= objeto2.y) && 
                    (objeto2.y + objeto2.altura >= objeto1.y);
                    
    return colisao_x && colisao_y;
}

# Verifica colisões entre um objeto e todos da cena
fun verificarTodasColisoes(dict cena, dict objeto) {
    list colisoes = list();
    
    forin (outro_objeto in cena.objetos) {
        if (outro_objeto != objeto) {
            if (verificarColisao(objeto, outro_objeto)) {
                colisoes.add(outro_objeto);
            }
        }
    }
    
    return colisoes;
}

# Detector de colisão mais preciso usando círculos
fun verificarColisaoCircular(dict objeto1, dict objeto2) {
    if (!objeto1.colisor || !objeto2.colisor) {
        return false;
    }
    
    # Calcula o centro de cada objeto
    float centro1_x = objeto1.x + objeto1.centro_x;
    float centro1_y = objeto1.y + objeto1.centro_y;
    
    float centro2_x = objeto2.x + objeto2.centro_x;
    float centro2_y = objeto2.y + objeto2.centro_y;
    
    # Calcula o raio de cada objeto (média de largura e altura / 2)
    float raio1 = (objeto1.largura + objeto1.altura) / 4;
    float raio2 = (objeto2.largura + objeto2.altura) / 4;
    
    # Calcula a distância entre os centros
    float dx = centro1_x - centro2_x;
    float dy = centro1_y - centro2_y;
    float distancia = Math.sqrt(dx * dx + dy * dy);
    
    # Verifica se há colisão
    return distancia < (raio1 + raio2);
}

# ==========================================================
# INPUT (TECLADO E MOUSE)
# ==========================================================

# Verifica se uma tecla está pressionada
fun teclaEstaPressionada(dict game, string tecla) {
    return game.teclas_pressionadas.get(tecla) == true;
}

# Obtém a posição do mouse
fun obterPosicaoMouse(dict game) {
    dict posicao = {
        x: game.mouse_x,
        y: game.mouse_y
    };
    return posicao;
}

# Verifica se o mouse está sendo clicado
fun mouseEstaSendoClicado(dict game) {
    return game.mouse_clicado;
}

# ==========================================================
# ÁUDIO
# ==========================================================

# Toca um som
fun tocarSom(string caminho_som) {
    # Carrega o áudio se ainda não foi carregado
    if (_recursos_carregados.get(caminho_som) == null) {
        carregarAudio(caminho_som);
    }
    
    # Toca o som
    __eval("
        var audio = new Audio('" + caminho_som + "');
        audio.play();
    ");
    
    println("Tocando som: " + caminho_som);
}

# Toca uma música de fundo
fun tocarMusicaFundo(string caminho_musica, bool repetir) {
    # Carrega o áudio se ainda não foi carregado
    if (_recursos_carregados.get(caminho_musica) == null) {
        carregarAudio(caminho_musica);
    }
    
    # Toca a música de fundo
    __eval("
        if (window.musicaFundo) {
            window.musicaFundo.pause();
        }
        
        window.musicaFundo = new Audio('" + caminho_musica + "');
        window.musicaFundo.loop = " + (repetir ? "true" : "false") + ";
        window.musicaFundo.volume = 0.5;
        window.musicaFundo.play();
    ");
    
    println("Tocando música de fundo: " + caminho_musica);
    if (repetir) {
        println("Música configurada para repetir");
    }
}

# Pausa a música de fundo
fun pausarMusicaFundo() {
    __eval("
        if (window.musicaFundo) {
            window.musicaFundo.pause();
        }
    ");
}

# Ajusta o volume da música de fundo (0.0 a 1.0)
fun ajustarVolumeMusicaFundo(float volume) {
    if (volume < 0) volume = 0;
    if (volume > 1) volume = 1;
    
    __eval("
        if (window.musicaFundo) {
            window.musicaFundo.volume = " + volume + ";
        }
    ");
}

# ==========================================================
# FÍSCA E PARTÍCULAS
# ==========================================================

# Aplica gravidade a um objeto
fun aplicarGravidade(dict objeto, float gravidade, float delta_tempo) {
    objeto.velocidade_y = objeto.velocidade_y + (gravidade * delta_tempo);
}

# Cria um sistema de partículas
fun criarSistemaParticulas(int x, int y, string cor, int quantidade, float vida_max) {
    dict sistema = {
        x: x,
        y: y,
        cor: cor,
        particulas: list(),
        ativo: true
    };
    
    # Cria as partículas
    for (int i = 0; i < quantidade; i = i + 1) {
        # Valores aleatórios para velocidade e vida
        float angulo = Math.random() * Math.PI * 2;
        float velocidade = Math.random() * 50 + 20;
        
        dict particula = {
            x: x,
            y: y,
            velocidade_x: Math.cos(angulo) * velocidade,
            velocidade_y: Math.sin(angulo) * velocidade,
            vida: Math.random() * vida_max + 0.5,
            tamanho: Math.random() * 5 + 2
        };
        
        sistema.particulas.add(particula);
    }
    
    return sistema;
}

# Atualiza um sistema de partículas
fun atualizarParticulas(dict sistema, float delta_tempo) {
    if (!sistema.ativo) {
        return;
    }
    
    # Atualiza cada partícula
    for (int i = sistema.particulas.length() - 1; i >= 0; i = i - 1) {
        dict particula = sistema.particulas.get(i);
        
        # Atualiza posição
        particula.x = particula.x + (particula.velocidade_x * delta_tempo);
        particula.y = particula.y + (particula.velocidade_y * delta_tempo);
        
        # Reduz a vida
        particula.vida = particula.vida - delta_tempo;
        
        # Remove partículas mortas
        if (particula.vida <= 0) {
            sistema.particulas.remove(i);
        }
    }
    
    # Desativa o sistema se todas as partículas acabaram
    if (sistema.particulas.length() == 0) {
        sistema.ativo = false;
    }
}

# Renderiza um sistema de partículas
fun renderizarParticulas(dict sistema) {
    if (!sistema.ativo) {
        return;
    }
    
    # Desenha cada partícula
    forin (particula in sistema.particulas) {
        # Calcula a opacidade baseada na vida
        float opacidade = particula.vida > 1 ? 1 : particula.vida;
        string cor = "rgba(" + sistema.cor + "," + opacidade + ")";
        
        desenharCirculo(particula.x, particula.y, particula.tamanho, cor, true);
    }
}

# ==========================================================
# EXEMPLOS E UTILIDADES
# ==========================================================

# Função para facilitar a inicialização da página
fun inicializarPagina() {
    __eval("
        document.body.style.margin = '0';
        document.body.style.padding = '0';
        document.body.style.overflow = 'hidden';
        document.body.style.backgroundColor = '#f0f0f0';
    ");
}

# Função auxiliar para avaliação JavaScript
fun __eval(string codigo) {
    # Esta função simula a execução de código JavaScript
    # Na implementação real, executaria o código no ambiente JavaScript
    println("Executando JS: " + codigo);
    return null;
}

# Utilitário para adicionar um botão na página
fun adicionarBotao(string texto, string onclick_codigo) {
    __eval("
        var botao = document.createElement('button');
        botao.innerText = '" + texto + "';
        botao.style.margin = '10px';
        botao.style.padding = '5px 10px';
        botao.onclick = function() { " + onclick_codigo + " };
        document.body.appendChild(botao);
    ");
} 