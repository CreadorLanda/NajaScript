# NajaGame2D_Nativo - Biblioteca para Jogos 2D com NajaScript
# Implementação nativa sem dependências externas

# ==========================================================
# VARIÁVEIS GLOBAIS E UTILITÁRIOS
# ==========================================================

# Dados globais do jogo
dict _GAME_DATA = {
    janela: null,        # Referência à janela de jogo
    recursos: dict(),    # Cache de recursos (imagens, sons, etc)
    tempo_atual: 0,      # Tempo atual em milissegundos
    teclas: dict(),      # Estado das teclas
    mouse_x: 0,          # Posição X do mouse
    mouse_y: 0,          # Posição Y do mouse
    mouse_clicado: false, # Estado do clique do mouse
    tick_rate: 60,       # Taxa de atualização (FPS)
    rodando: false       # Estado de execução do jogo
};

# Cores predefinidas
dict _CORES = {
    preto: "#000000",
    branco: "#FFFFFF",
    vermelho: "#FF0000",
    verde: "#00FF00",
    azul: "#0000FF",
    amarelo: "#FFFF00",
    ciano: "#00FFFF",
    magenta: "#FF00FF"
};

# ==========================================================
# NÚCLEO DO MOTOR DE JOGOS
# ==========================================================

# Inicializa o motor de jogos
fun initGame(int largura, int altura, string titulo) {
    # Cria a janela do jogo (implementado pelo interpretador)
    _GAME_DATA.janela = __criarJanela(largura, altura, titulo);
    
    # Inicializa estruturas internas
    _GAME_DATA.recursos = dict();
    _GAME_DATA.tempo_atual = currentTime();
    _GAME_DATA.teclas = dict();
    
    # Cria o objeto do jogo
    dict game = {
        largura: largura,
        altura: altura,
        titulo: titulo,
        cena_atual: "principal",
        cenas: dict(),
        sprites: dict(),
        delta_tempo: 0,
        ultimo_tempo: _GAME_DATA.tempo_atual,
        mouse_x: 0,
        mouse_y: 0,
        mouse_clicado: false,
        teclas_pressionadas: dict(),
        rodando: false
    };
    
    println("Jogo inicializado: " + titulo + " (" + largura + "x" + altura + ")");
    return game;
}

# Obtém o tempo atual em milissegundos
fun currentTime() {
    # Esta função deve ser implementada nativamente pelo interpretador
    # para fornecer o tempo atual em milissegundos
    return __obterTempoAtual();
}

# Inicia o loop principal do jogo
fun startGame(dict game) {
    game.rodando = true;
    _GAME_DATA.rodando = true;
    
    # Configura handlers de eventos (implementados pelo interpretador)
    __configurarEventosTeclado(_handleTeclaPressionada, _handleTeclaSolta);
    __configurarEventosMouse(_handleMouseMovimento, _handleMouseClique, _handleMouseSoltar);
    
    # Inicia o loop principal (implementado pelo interpretador)
    __iniciarLoopJogo(_gameLoop, game, _GAME_DATA.tick_rate);
    
    println("Jogo iniciado!");
}

# Função do loop principal (chamada pelo interpretador a cada frame)
fun _gameLoop(dict game) {
    if (!game.rodando) {
        return false;  # Sinaliza para parar o loop
    }
    
    # Calcula delta tempo
    int tempo_atual = currentTime();
    game.delta_tempo = (tempo_atual - game.ultimo_tempo) / 1000.0;  # Converte para segundos
    game.ultimo_tempo = tempo_atual;
    
    # Sincroniza dados do mouse e teclado
    game.mouse_x = _GAME_DATA.mouse_x;
    game.mouse_y = _GAME_DATA.mouse_y;
    game.mouse_clicado = _GAME_DATA.mouse_clicado;
    game.teclas_pressionadas = _GAME_DATA.teclas;
    
    # Limpa a tela
    limparTela(game);
    
    # Obtém a cena atual
    dict cena = game.cenas.get(game.cena_atual);
    if (cena != null) {
        # Atualiza a lógica do jogo
        if (cena.atualizar != null) {
            cena.atualizar(game, game.delta_tempo);
        }
        
        # Renderiza a cena
        if (cena.renderizar != null) {
            cena.renderizar(game);
        }
    }
    
    # Atualiza a tela (implementado pelo interpretador)
    __atualizarTela();
    
    return true;  # Continua o loop
}

# Handlers de eventos (chamados pelo interpretador)
fun _handleTeclaPressionada(string tecla) {
    _GAME_DATA.teclas.add(tecla, true);
}

fun _handleTeclaSolta(string tecla) {
    _GAME_DATA.teclas.add(tecla, false);
}

fun _handleMouseMovimento(int x, int y) {
    _GAME_DATA.mouse_x = x;
    _GAME_DATA.mouse_y = y;
}

fun _handleMouseClique(int x, int y) {
    _GAME_DATA.mouse_x = x;
    _GAME_DATA.mouse_y = y;
    _GAME_DATA.mouse_clicado = true;
}

fun _handleMouseSoltar(int x, int y) {
    _GAME_DATA.mouse_x = x;
    _GAME_DATA.mouse_y = y;
    _GAME_DATA.mouse_clicado = false;
}

# Limpa a tela com uma cor
fun limparTela(dict game, string cor) {
    if (cor == null) {
        cor = _CORES.preto;
    }
    
    # Implementado pelo interpretador
    __limparTela(cor);
}

# Para o jogo
fun stopGame(dict game) {
    game.rodando = false;
    _GAME_DATA.rodando = false;
    
    println("Jogo parado");
}

# ==========================================================
# GERENCIAMENTO DE CENAS
# ==========================================================

# Cria uma nova cena
fun criarCena(string nome, fun atualizar, fun renderizar) {
    dict cena = {
        nome: nome,
        atualizar: atualizar,
        renderizar: renderizar,
        objetos: list()
    };
    return cena;
}

# Adiciona uma cena ao jogo
fun adicionarCena(dict game, dict cena) {
    game.cenas.add(cena.nome, cena);
    println("Cena '" + cena.nome + "' adicionada ao jogo");
}

# Troca para uma cena específica
fun trocarCena(dict game, string nome_cena) {
    if (game.cenas.get(nome_cena) != null) {
        game.cena_atual = nome_cena;
        println("Trocado para cena: " + nome_cena);
    } else {
        println("Erro: Cena '" + nome_cena + "' não encontrada");
    }
}

# ==========================================================
# CARREGAMENTO DE RECURSOS
# ==========================================================

# Carrega uma imagem e retorna quando estiver pronta
fun carregarImagem(string caminho) {
    # Verifica se a imagem já está em cache
    if (_GAME_DATA.recursos.get(caminho) != null) {
        return _GAME_DATA.recursos.get(caminho);
    }
    
    # Carrega a imagem (implementado pelo interpretador)
    any imagem = __carregarImagem(caminho);
    
    if (imagem != null) {
        # Adiciona ao cache
        _GAME_DATA.recursos.add(caminho, imagem);
        println("Imagem carregada: " + caminho);
    } else {
        println("Erro ao carregar imagem: " + caminho);
    }
    
    return imagem;
}

# Carrega um arquivo de áudio
fun carregarAudio(string caminho) {
    # Verifica se o áudio já está em cache
    if (_GAME_DATA.recursos.get(caminho) != null) {
        return _GAME_DATA.recursos.get(caminho);
    }
    
    # Carrega o áudio (implementado pelo interpretador)
    any audio = __carregarAudio(caminho);
    
    if (audio != null) {
        # Adiciona ao cache
        _GAME_DATA.recursos.add(caminho, audio);
        println("Áudio carregado: " + caminho);
    } else {
        println("Erro ao carregar áudio: " + caminho);
    }
    
    return audio;
}

# ==========================================================
# SPRITES E OBJETOS DO JOGO
# ==========================================================

# Cria um sprite (imagem 2D)
fun criarSprite(string caminho, int largura, int altura) {
    # Carrega a imagem
    any imagem = carregarImagem(caminho);
    
    dict sprite = {
        caminho: caminho,
        imagem: imagem,
        largura: largura,
        altura: altura,
        frame_atual: 0,
        total_frames: 1,
        tempo_animacao: 0,
        intervalo_frame: 0.1,  # 100ms entre frames por padrão
        animacao_ativa: false,
        sprite_sheet: false,
        frames_por_linha: 1,
        frames: list()
    };
    
    # Se a imagem for nula, retorna o sprite com imagem nula
    if (imagem == null) {
        return sprite;
    }
    
    # Redimensiona a imagem se necessário (implementado pelo interpretador)
    if (__obterLarguraImagem(imagem) != largura || __obterAlturaImagem(imagem) != altura) {
        sprite.imagem = __redimensionarImagem(imagem, largura, altura);
    }
    
    println("Sprite criado: " + caminho);
    return sprite;
}

# Configura uma sprite sheet (imagem com vários frames)
fun configurarSpriteSheet(dict sprite, int total_frames, int frames_por_linha, float intervalo_frame) {
    sprite.total_frames = total_frames;
    sprite.frames_por_linha = frames_por_linha > 0 ? frames_por_linha : 1;
    sprite.intervalo_frame = intervalo_frame;
    sprite.sprite_sheet = true;
    sprite.animacao_ativa = true;
    
    # Calcula largura e altura de cada frame
    sprite.frame_largura = sprite.largura / sprite.frames_por_linha;
    sprite.frame_altura = sprite.altura / Math.ceil(sprite.total_frames / sprite.frames_por_linha);
    
    # Limpa os frames existentes
    sprite.frames = list();
    
    # Se não houver imagem, retorna sem criar frames
    if (sprite.imagem == null) {
        return sprite;
    }
    
    # Extrai os frames da sprite sheet (implementado pelo interpretador)
    for (int i = 0; i < total_frames; i = i + 1) {
        int linha = i % frames_por_linha;
        int coluna = Math.floor(i / frames_por_linha);
        
        int x = linha * sprite.frame_largura;
        int y = coluna * sprite.frame_altura;
        
        # Recorta o frame da imagem original
        any frame = __recortarImagem(
            sprite.imagem, 
            x, y, 
            sprite.frame_largura, 
            sprite.frame_altura
        );
        
        sprite.frames.add(frame);
    }
    
    return sprite;
}

# Atualiza a animação de um sprite
fun atualizarAnimacao(dict sprite, float delta_tempo) {
    if (!sprite.animacao_ativa || sprite.total_frames <= 1) {
        return;
    }
    
    sprite.tempo_animacao = sprite.tempo_animacao + delta_tempo;
    
    if (sprite.tempo_animacao >= sprite.intervalo_frame) {
        sprite.frame_atual = (sprite.frame_atual + 1) % sprite.total_frames;
        sprite.tempo_animacao = 0;
    }
}

# Carrega um sprite no jogo
fun carregarSprite(dict game, string nome, dict sprite) {
    game.sprites.add(nome, sprite);
    println("Sprite '" + nome + "' carregado");
}

# Cria um objeto de jogo
fun criarObjeto(string nome, int x, int y, dict sprite) {
    int largura = sprite.frame_largura || sprite.largura;
    int altura = sprite.frame_altura || sprite.altura;
    
    dict objeto = {
        nome: nome,
        x: x,
        y: y,
        largura: largura,
        altura: altura,
        velocidade_x: 0,
        velocidade_y: 0,
        sprite: sprite,
        colisor: true,
        visivel: true,
        rotacao: 0,
        escala_x: 1,
        escala_y: 1,
        centro_x: largura / 2,
        centro_y: altura / 2
    };
    return objeto;
}

# Adiciona um objeto a uma cena
fun adicionarObjetoACena(dict cena, dict objeto) {
    cena.objetos.add(objeto);
    println("Objeto '" + objeto.nome + "' adicionado à cena '" + cena.nome + "'");
}

# Renderiza um objeto
fun renderizarObjeto(dict game, dict objeto) {
    if (!objeto.visivel) {
        return;
    }
    
    # Obtém a imagem a renderizar
    any imagem = null;
    
    if (objeto.sprite.sprite_sheet && objeto.sprite.frames.length() > 0) {
        # Usa o frame atual da sprite sheet
        int frame_idx = objeto.sprite.frame_atual;
        if (frame_idx >= 0 && frame_idx < objeto.sprite.frames.length()) {
            imagem = objeto.sprite.frames.get(frame_idx);
        }
    } else {
        # Usa a imagem completa do sprite
        imagem = objeto.sprite.imagem;
    }
    
    # Se não tiver imagem, não renderiza
    if (imagem == null) {
        return;
    }
    
    # Prepara transformações
    float escala_x = objeto.escala_x;
    float escala_y = objeto.escala_y;
    float rotacao = objeto.rotacao;
    
    # Desenha a imagem (implementado pelo interpretador)
    __desenharImagem(
        imagem,
        objeto.x,
        objeto.y,
        objeto.largura,
        objeto.altura,
        rotacao,
        escala_x,
        escala_y
    );
}

# Desenha texto na tela
fun desenharTexto(string texto, int x, int y, string cor, string fonte) {
    if (cor == null) {
        cor = _CORES.branco;
    }
    
    if (fonte == null) {
        fonte = "20px Arial";
    }
    
    # Implementado pelo interpretador
    __desenharTexto(texto, x, y, cor, fonte);
}

# Desenha formas geométricas
fun desenharRetangulo(int x, int y, int largura, int altura, string cor, bool preenchido) {
    if (cor == null) {
        cor = _CORES.branco;
    }
    
    # Implementado pelo interpretador
    __desenharRetangulo(x, y, largura, altura, cor, preenchido);
}

fun desenharCirculo(int x, int y, int raio, string cor, bool preenchido) {
    if (cor == null) {
        cor = _CORES.branco;
    }
    
    # Implementado pelo interpretador
    __desenharCirculo(x, y, raio, cor, preenchido);
}

# Atualiza a física de um objeto
fun atualizarObjeto(dict objeto, float delta_tempo) {
    # Atualiza posição baseada na velocidade
    objeto.x = objeto.x + (objeto.velocidade_x * delta_tempo);
    objeto.y = objeto.y + (objeto.velocidade_y * delta_tempo);
    
    # Atualiza animação do sprite
    if (objeto.sprite.animacao_ativa) {
        atualizarAnimacao(objeto.sprite, delta_tempo);
    }
}

# ==========================================================
# SISTEMA DE COLISÕES
# ==========================================================

# Verifica colisão entre dois objetos (AABB - Axis-Aligned Bounding Box)
fun verificarColisao(dict objeto1, dict objeto2) {
    if (!objeto1.colisor || !objeto2.colisor) {
        return false;
    }
    
    bool colisao_x = (objeto1.x + objeto1.largura >= objeto2.x) && 
                    (objeto2.x + objeto2.largura >= objeto1.x);
                    
    bool colisao_y = (objeto1.y + objeto1.altura >= objeto2.y) && 
                    (objeto2.y + objeto2.altura >= objeto1.y);
                    
    return colisao_x && colisao_y;
}

# Verifica colisões entre um objeto e todos da cena
fun verificarTodasColisoes(dict cena, dict objeto) {
    list colisoes = list();
    
    forin (outro_objeto in cena.objetos) {
        if (outro_objeto != objeto) {
            if (verificarColisao(objeto, outro_objeto)) {
                colisoes.add(outro_objeto);
            }
        }
    }
    
    return colisoes;
}

# Detector de colisão mais preciso usando círculos
fun verificarColisaoCircular(dict objeto1, dict objeto2) {
    if (!objeto1.colisor || !objeto2.colisor) {
        return false;
    }
    
    # Calcula o centro de cada objeto
    float centro1_x = objeto1.x + objeto1.centro_x;
    float centro1_y = objeto1.y + objeto1.centro_y;
    
    float centro2_x = objeto2.x + objeto2.centro_x;
    float centro2_y = objeto2.y + objeto2.centro_y;
    
    # Calcula o raio de cada objeto (média de largura e altura / 2)
    float raio1 = (objeto1.largura + objeto1.altura) / 4;
    float raio2 = (objeto2.largura + objeto2.altura) / 4;
    
    # Calcula a distância entre os centros
    float dx = centro1_x - centro2_x;
    float dy = centro1_y - centro2_y;
    float distancia = Math.sqrt(dx * dx + dy * dy);
    
    # Verifica se há colisão
    return distancia < (raio1 + raio2);
}

# ==========================================================
# INPUT (TECLADO E MOUSE)
# ==========================================================

# Verifica se uma tecla está pressionada
fun teclaEstaPressionada(dict game, string tecla) {
    return game.teclas_pressionadas.get(tecla) == true;
}

# Obtém a posição do mouse
fun obterPosicaoMouse(dict game) {
    dict posicao = {
        x: game.mouse_x,
        y: game.mouse_y
    };
    return posicao;
}

# Verifica se o mouse está sendo clicado
fun mouseEstaSendoClicado(dict game) {
    return game.mouse_clicado;
}

# ==========================================================
# ÁUDIO
# ==========================================================

# Toca um som
fun tocarSom(string caminho_som) {
    # Carrega o som se necessário
    any som = carregarAudio(caminho_som);
    
    if (som == null) {
        println("Erro: Não foi possível tocar o som: " + caminho_som);
        return;
    }
    
    # Toca o som (implementado pelo interpretador)
    __tocarSom(som);
    
    println("Tocando som: " + caminho_som);
}

# Toca uma música de fundo
fun tocarMusicaFundo(string caminho_musica, bool repetir) {
    # Carrega a música se necessário
    any musica = carregarAudio(caminho_musica);
    
    if (musica == null) {
        println("Erro: Não foi possível tocar a música: " + caminho_musica);
        return;
    }
    
    # Para qualquer música que esteja tocando
    pausarMusicaFundo();
    
    # Toca a música (implementado pelo interpretador)
    __tocarMusica(musica, repetir);
    
    println("Tocando música de fundo: " + caminho_musica);
    if (repetir) {
        println("Música configurada para repetir");
    }
}

# Pausa a música de fundo
fun pausarMusicaFundo() {
    # Implementado pelo interpretador
    __pausarMusica();
}

# Ajusta o volume da música de fundo (0.0 a 1.0)
fun ajustarVolumeMusicaFundo(float volume) {
    if (volume < 0) volume = 0;
    if (volume > 1) volume = 1;
    
    # Implementado pelo interpretador
    __ajustarVolumeMusica(volume);
}

# ==========================================================
# FÍSICA E PARTÍCULAS
# ==========================================================

# Aplica gravidade a um objeto
fun aplicarGravidade(dict objeto, float gravidade, float delta_tempo) {
    objeto.velocidade_y = objeto.velocidade_y + (gravidade * delta_tempo);
}

# Cria um sistema de partículas
fun criarSistemaParticulas(int x, int y, string cor, int quantidade, float vida_max) {
    dict sistema = {
        x: x,
        y: y,
        cor: cor,
        particulas: list(),
        ativo: true,
        nome: "particulas"
    };
    
    # Cria as partículas
    for (int i = 0; i < quantidade; i = i + 1) {
        # Valores aleatórios para velocidade e vida
        float angulo = Math.random() * Math.PI * 2;
        float velocidade = Math.random() * 50 + 20;
        
        dict particula = {
            x: x,
            y: y,
            velocidade_x: Math.cos(angulo) * velocidade,
            velocidade_y: Math.sin(angulo) * velocidade,
            vida: Math.random() * vida_max + 0.5,
            tamanho: Math.random() * 5 + 2
        };
        
        sistema.particulas.add(particula);
    }
    
    return sistema;
}

# Atualiza um sistema de partículas
fun atualizarParticulas(dict sistema, float delta_tempo) {
    if (!sistema.ativo) {
        return;
    }
    
    # Atualiza cada partícula
    for (int i = sistema.particulas.length() - 1; i >= 0; i = i - 1) {
        dict particula = sistema.particulas.get(i);
        
        # Atualiza posição
        particula.x = particula.x + (particula.velocidade_x * delta_tempo);
        particula.y = particula.y + (particula.velocidade_y * delta_tempo);
        
        # Reduz a vida
        particula.vida = particula.vida - delta_tempo;
        
        # Remove partículas mortas
        if (particula.vida <= 0) {
            sistema.particulas.remove(i);
        }
    }
    
    # Desativa o sistema se todas as partículas acabaram
    if (sistema.particulas.length() == 0) {
        sistema.ativo = false;
    }
}

# Renderiza um sistema de partículas
fun renderizarParticulas(dict sistema) {
    if (!sistema.ativo) {
        return;
    }
    
    # Desenha cada partícula
    forin (particula in sistema.particulas) {
        # Calcula a opacidade baseada na vida
        float opacidade = particula.vida > 1 ? 1 : particula.vida;
        string cor = "rgba(" + sistema.cor + "," + opacidade + ")";
        
        desenharCirculo(particula.x, particula.y, particula.tamanho, cor, true);
    }
}

# ==========================================================
# UTILIDADES
# ==========================================================

# Função para criar cores em formato RGB
fun criarCor(int r, int g, int b) {
    return "rgb(" + r + "," + g + "," + b + ")";
}

# Função para criar cores em formato RGBA (com transparência)
fun criarCorAlpha(int r, int g, int b, float alpha) {
    return "rgba(" + r + "," + g + "," + b + "," + alpha + ")";
}

# Função para criar cores aleatórias
fun corAleatoria() {
    int r = Math.round(Math.random() * 255);
    int g = Math.round(Math.random() * 255);
    int b = Math.round(Math.random() * 255);
    
    return "rgb(" + r + "," + g + "," + b + ")";
}

# Função para calcular a distância entre dois pontos
fun distancia(float x1, float y1, float x2, float y2) {
    float dx = x2 - x1;
    float dy = y2 - y1;
    return Math.sqrt(dx * dx + dy * dy);
}

# ==========================================================
# FUNÇÕES NATIVAS A SEREM IMPLEMENTADAS NO INTERPRETADOR
# ==========================================================

# Essas funções precisam ser implementadas nativamente pelo interpretador NajaScript
# para fornecer acesso à funcionalidade de jogo básica.

# Funções de janela e renderização
fun __criarJanela(int largura, int altura, string titulo) { return null; }
fun __atualizarTela() {}
fun __limparTela(string cor) {}

# Funções de tempo
fun __obterTempoAtual() { return 0; }

# Funções de manipulação de eventos
fun __configurarEventosTeclado(fun callback_pressionar, fun callback_soltar) {}
fun __configurarEventosMouse(fun callback_movimento, fun callback_clique, fun callback_soltar) {}
fun __iniciarLoopJogo(fun callback_loop, dict game, int tick_rate) {}

# Funções de manipulação de recursos
fun __carregarImagem(string caminho) { return null; }
fun __carregarAudio(string caminho) { return null; }
fun __obterLarguraImagem(any imagem) { return 0; }
fun __obterAlturaImagem(any imagem) { return 0; }
fun __redimensionarImagem(any imagem, int largura, int altura) { return null; }
fun __recortarImagem(any imagem, int x, int y, int largura, int altura) { return null; }

# Funções de desenho
fun __desenharImagem(any imagem, int x, int y, int largura, int altura, float rotacao, float escala_x, float escala_y) {}
fun __desenharTexto(string texto, int x, int y, string cor, string fonte) {}
fun __desenharRetangulo(int x, int y, int largura, int altura, string cor, bool preenchido) {}
fun __desenharCirculo(int x, int y, int raio, string cor, bool preenchido) {}

# Funções de áudio
fun __tocarSom(any som) {}
fun __tocarMusica(any musica, bool repetir) {}
fun __pausarMusica() {}
fun __ajustarVolumeMusica(float volume) {} 