{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "NajaScript",
  "patterns": [
    { "include": "#keywords" },
    { "include": "#storage" },
    { "include": "#strings" },
    { "include": "#comments" },
    { "include": "#numbers" },
    { "include": "#operators" },
    { "include": "#functions" },
    { "include": "#classes" },
    { "include": "#decorators" },
    { "include": "#types" },
    { "include": "#constants" },
    { "include": "#variables" },
    { "include": "#punctuation" },
    { "include": "#modules" },
    { "include": "#exports" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "\\b(if|else|elif|for|forin|while|do|continue|break|return|try|catch|finally|throw|import|from|as|default|switch|case|in|match)\\b"
        },
        {
          "name": "keyword.control",
          "match": "\\b(se|senao|enquanto|para|paracada|fazer|parar|continuar|retornar|tentar|pegar|finalmente|lance|importar|de|como|padrao|caso|trocar|em|escolher)\\b"
        }
      ]
    },
    "exports": {
      "patterns": [
        {
          "name": "keyword.other.export",
          "match": "\\bexport\\b"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type",
          "match": "\\b(class|constructor|extends|implements|interface|new|fun|function|let|const|var|async|await)\\b"
        },
        {
          "name": "storage.type",
          "match": "\\b(classe|construtor|extende|implementa|interface|novo|funcao|async|aguarde)\\b"
        },
        {
          "name": "storage.type",
          "match": "\\b(int|float|string|bool|void|any|dict|list|vector|array|map|set|tuple)\\b"
        },
        {
          "name": "storage.type",
          "match": "\\b(inteiro|decimal|texto|booleano|vazio|qualquer|dicionario|lista|vetor|mapa|conjunto|tupla)\\b"
        },
        {
          "name": "storage.modifier",
          "match": "\\b(public|private|protected|static)\\b"
        },
        {
          "name": "storage.modifier",
          "match": "\\b(publico|privado|protegido|estatico)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.template",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape",
              "match": "\\\\."
            },
            {
              "name": "meta.template.expression",
              "begin": "\\${",
              "end": "}",
              "patterns": [
                { "include": "$self" }
              ]
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash",
          "match": "//.*$"
        },
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal",
          "match": "\\b([0-9]+(\\.([0-9]+))?|\\.([0-9]+))\\b"
        },
        {
          "name": "constant.numeric.hex",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.binary",
          "match": "\\b0b[01]+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment",
          "match": "=|\\+=|-=|\\*=|/=|%=|\\*\\*="
        },
        {
          "name": "keyword.operator.arithmetic",
          "match": "\\+|-|\\*|/|%|\\*\\*"
        },
        {
          "name": "keyword.operator.logical",
          "match": "&&|\\|\\||!|and|or|not|e|ou|nao"
        },
        {
          "name": "keyword.operator.comparison",
          "match": "==|!=|<=|>=|<|>|===|!=="
        },
        {
          "name": "keyword.operator.ternary",
          "match": "\\?|:"
        },
        {
          "name": "keyword.operator.new",
          "match": "\\b(new|novo)\\b"
        },
        {
          "name": "keyword.operator.expression",
          "match": "=>|\\.\\.\\."
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.function" }
          }
        },
        {
          "match": "\\b(fun|function|funcao)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.type" },
            "2": { "name": "entity.name.function" }
          }
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "match": "\\b(class|classe)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.type" },
            "2": { "name": "entity.name.type.class" }
          }
        },
        {
          "match": "\\b(interface)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.type" },
            "2": { "name": "entity.name.type.interface" }
          }
        },
        {
          "match": "\\b(extends|extende)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.modifier" },
            "2": { "name": "entity.name.type.class" }
          }
        },
        {
          "match": "\\b(implements|implementa)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.modifier" },
            "2": { "name": "entity.name.type.interface" }
          }
        }
      ]
    },
    "decorators": {
      "name": "meta.decorator",
      "begin": "@",
      "end": "(?=\\s)",
      "patterns": [
        {
          "include": "#functions"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": ":\\s*([A-Z][a-zA-Z0-9_]*|[a-z]+)\\b",
          "captures": {
            "1": { "name": "support.type" }
          }
        },
        {
          "name": "entity.name.type",
          "match": "\\b([A-Z][a-zA-Z0-9_]*)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.true",
          "match": "\\b(true|verdadeiro)\\b"
        },
        {
          "name": "constant.language.boolean.false",
          "match": "\\b(false|falso)\\b"
        },
        {
          "name": "constant.language.null",
          "match": "\\b(null|nulo)\\b"
        },
        {
          "name": "constant.language.undefined",
          "match": "\\b(undefined|None)\\b"
        },
        {
          "name": "variable.other.constant",
          "match": "\\b([A-Z][A-Z0-9_]*)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.language.this",
          "match": "\\b(this|este)\\b"
        },
        {
          "name": "variable.language.super",
          "match": "\\bsuper\\b"
        },
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\(.*\\)\\s*\\{)",
          "captures": {
            "1": { "name": "entity.name.function.method" }
          }
        },
        {
          "match": "\\.(\\w+)\\b(?!\\s*\\()",
          "captures": {
            "1": { "name": "variable.other.property" }
          }
        },
        {
          "match": "\\.(\\w+)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.function.method" }
          }
        },
        {
          "match": "\\b(let|const|var)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "storage.type" },
            "2": { "name": "variable.other.readwrite" }
          }
        },
        {
          "match": "\\bfunction\\s*\\(([^)]*)\\)",
          "captures": {
            "1": { "name": "variable.parameter" }
          }
        },
        {
          "match": "\\b(fun|funcao)\\s+\\w+\\s*\\(([^)]*)\\)",
          "captures": {
            "1": { "name": "storage.type" },
            "2": { "name": "variable.parameter" }
          }
        },
        {
          "name": "variable.other.readwrite",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.comma",
          "match": ","
        },
        {
          "name": "punctuation.terminator.statement",
          "match": ";"
        },
        {
          "name": "punctuation.accessor",
          "match": "\\."
        },
        {
          "name": "punctuation.definition.parameters.begin",
          "match": "\\("
        },
        {
          "name": "punctuation.definition.parameters.end",
          "match": "\\)"
        },
        {
          "name": "punctuation.definition.block.begin",
          "match": "\\{"
        },
        {
          "name": "punctuation.definition.block.end",
          "match": "\\}"
        },
        {
          "name": "punctuation.definition.brackets.begin",
          "match": "\\["
        },
        {
          "name": "punctuation.definition.brackets.end",
          "match": "\\]"
        },
        {
          "name": "punctuation.definition.string.begin",
          "match": "[\"`']"
        },
        {
          "name": "punctuation.definition.string.end",
          "match": "[\"`']"
        }
      ]
    },
    "modules": {
      "patterns": [
        {
          "match": "\\b(import|importar)\\s+['\"]([^'\"]+)['\"]",
          "captures": {
            "1": { "name": "keyword.control.import" },
            "2": { "name": "string.quoted.module" }
          }
        },
        {
          "match": "\\b(from|de)\\s+['\"]([^'\"]+)['\"]",
          "captures": {
            "1": { "name": "keyword.control.import" },
            "2": { "name": "string.quoted.module" }
          }
        }
      ]
    }
  },
  "scopeName": "source.naja"
} 