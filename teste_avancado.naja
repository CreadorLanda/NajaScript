// Teste de funcionalidades avançadas dentro das limitações do NajaScript

// Função para calcular números de Fibonacci (recursiva)
fun fibonacci(n) {
    if (n <= 0) {
        return 0;
    }
    if (n == 1 || n == 2) {
        return 1;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

// Função para verificar se um número é primo
fun ehPrimo(n) {
    if (n <= 1) {
        return false;
    }
    if (n <= 3) {
        return true;
    }
    if (n % 2 == 0 || n % 3 == 0) {
        return false;
    }
    
    int i = 5;
    while (i * i <= n) {
        if (n % i == 0 || n % (i + 2) == 0) {
            return false;
        }
        i = i + 6;
    }
    
    return true;
}

// Função para gerar uma sequência de números
fun gerarSequencia(inicio, fim, passo) {
    list resultado = list();
    int i = inicio;
    while (i <= fim) {
        resultado.add(i);
        i = i + passo;
    }
    return resultado;
}

// Função para filtrar números pares de uma lista
fun filtrarPares(numeros) {
    list resultado = list();
    int i = 0;
    while (i < numeros.length()) {
        int valor = numeros.get(i);
        if (valor % 2 == 0) {
            resultado.add(valor);
        }
        i = i + 1;
    }
    return resultado;
}

// Função para calcular estatísticas de uma lista de números
fun calcularEstatisticas(numeros) {
    dict estatisticas = {};
    
    // Calcular soma
    int soma = 0;
    for (int i = 0; i < numeros.length(); i = i + 1) {
        soma = soma + numeros.get(i);
    }
    
    // Calcular média
    float media = soma / numeros.length();
    
    // Encontrar valor mínimo e máximo
    int minimo = numeros.get(0);
    int maximo = numeros.get(0);
    
    for (int i = 1; i < numeros.length(); i = i + 1) {
        int valor = numeros.get(i);
        if (valor < minimo) {
            minimo = valor;
        }
        if (valor > maximo) {
            maximo = valor;
        }
    }
    
    // Adicionar estatísticas ao dicionário
    estatisticas.add("quantidade", numeros.length());
    estatisticas.add("soma", soma);
    estatisticas.add("media", media);
    estatisticas.add("minimo", minimo);
    estatisticas.add("maximo", maximo);
    
    return estatisticas;
}

// Função principal
fun main() {
    println("=== Teste de Funcionalidades Avançadas ===");
    
    // Teste da sequência de Fibonacci
    println("\n1. Sequência de Fibonacci:");
    println("Fibonacci(7): " + fibonacci(7));
    println("Fibonacci(10): " + fibonacci(10));
    
    // Teste de números primos
    println("\n2. Verificação de Números Primos:");
    println("7 é primo? " + ehPrimo(7));
    println("15 é primo? " + ehPrimo(15));
    println("23 é primo? " + ehPrimo(23));
    
    // Teste de geração de sequência
    println("\n3. Geração de Sequência:");
    list sequencia = gerarSequencia(1, 20, 2);
    println("Sequência de 1 a 20 (passo 2): " + sequencia);
    
    // Teste de filtragem
    println("\n4. Filtragem de Lista:");
    list numeros = list(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
    list pares = filtrarPares(numeros);
    println("Lista original: " + numeros);
    println("Apenas números pares: " + pares);
    
    // Teste de estatísticas
    println("\n5. Cálculo de Estatísticas:");
    dict estatisticas = calcularEstatisticas(numeros);
    println("Estatísticas da lista:");
    println("  Quantidade: " + estatisticas.get("quantidade"));
    println("  Soma: " + estatisticas.get("soma"));
    println("  Média: " + estatisticas.get("media"));
    println("  Mínimo: " + estatisticas.get("minimo"));
    println("  Máximo: " + estatisticas.get("maximo"));
    
    // Teste de combinação de estruturas
    println("\n6. Estruturas de Dados Aninhadas:");
    
    // Lista de dicionários (pessoas)
    list pessoas = list();
    
    dict pessoa1 = {};
    pessoa1.add("nome", "Ana");
    pessoa1.add("idade", 25);
    pessoa1.add("cidade", "São Paulo");
    
    dict pessoa2 = {};
    pessoa2.add("nome", "Carlos");
    pessoa2.add("idade", 32);
    pessoa2.add("cidade", "Rio de Janeiro");
    
    dict pessoa3 = {};
    pessoa3.add("nome", "Mariana");
    pessoa3.add("idade", 28);
    pessoa3.add("cidade", "Belo Horizonte");
    
    // Adicionar pessoas à lista
    pessoas.add(pessoa1);
    pessoas.add(pessoa2);
    pessoas.add(pessoa3);
    
    println("Lista de pessoas:");
    
    // Percorrer e exibir
    for (int i = 0; i < pessoas.length(); i = i + 1) {
        dict p = pessoas.get(i);
        println("  Pessoa " + (i + 1) + ":");
        println("    Nome: " + p.get("nome"));
        println("    Idade: " + p.get("idade"));
        println("    Cidade: " + p.get("cidade"));
    }
    
    println("\nTeste concluído com sucesso!");
}

// Executar o programa
main(); 