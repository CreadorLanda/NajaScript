// Teste completo das funcionalidades padr√£o do NajaScript
// JSON, Fetch e Eventos - Tudo sem necessidade de imports

println("=== TESTE COMPLETO DAS FUNCIONALIDADES PADR√ÉO ===");

// 1. TESTE JSON
println("\n1. TESTANDO JSON:");

// Criar objeto
dict dados = dict();
dados.add("nome", "Jo√£o");
dados.add("idade", 30);
dados.add("ativo", true);

list hobbies = list();
hobbies.add("programar");
hobbies.add("ler");
hobbies.add("jogar");
dados.add("hobbies", hobbies);

println("Objeto original:");
println(dados);

// Converter para JSON
string json_str = JSON.stringify(dados);
println("\nJSON String:");
println(json_str);

// Converter de volta para objeto
dict dados_restaurados = JSON.parse(json_str);
println("\nDados restaurados:");
println(dados_restaurados);

// 2. TESTE EVENTOS
println("\n2. TESTANDO EVENTOS:");

// Fun√ß√£o para tratar eventos
function tratarEvento(nome, valor) {
    println("Evento recebido: " + nome + " = " + valor);
}

// Fun√ß√£o para evento √∫nico
function eventoUnico(mensagem) {
    println("Evento √∫nico: " + mensagem);
}

// Adicionar listeners
addEventListener("teste", tratarEvento);
addEventListener("login", tratarEvento);
once("primeiro", eventoUnico);

println("Listeners adicionados");

// Disparar eventos
dispatchEvent("teste", "evento1", "valor1");
dispatchEvent("login", "usu√°rio", "admin");
dispatchEvent("primeiro", "Esta mensagem aparece s√≥ uma vez");
dispatchEvent("primeiro", "Esta mensagem N√ÉO aparece");

// Teste com EventEmitter personalizado
println("\n3. TESTANDO EVENTEMITTER PERSONALIZADO:");

EventEmitter emitter = createEventEmitter();

function onMessage(msg) {
    println("Mensagem recebida: " + msg);
}

function onError(erro) {
    println("Erro: " + erro);
}

// Adicionar listeners ao emitter personalizado
emitter.on("message", onMessage);
emitter.on("error", onError);

// Disparar eventos
emitter.emit("message", "Ol√° mundo!");
emitter.emit("error", "Algo deu errado");

// Verificar listeners
println("N√∫mero de listeners para 'message': " + emitter.listenerCount("message"));

// 4. TESTE FETCH (simulado com API p√∫blica)
println("\n4. TESTANDO FETCH:");

// Teste b√°sico GET
println("Fazendo requisi√ß√£o GET...");
try {
    // Usando uma API p√∫blica de teste
    Response response = fetch("https://httpbin.org/get");
    
    println("Status: " + response.status);
    println("OK: " + response.ok);
    
    if (response.ok) {
        string texto = response.text();
        println("Primeiros 200 caracteres da resposta:");
        println(texto.substring(0, 200));
    }
} catch (Exception e) {
    println("Erro na requisi√ß√£o: " + e.getMessage());
}

// Teste POST com JSON
println("\nFazendo requisi√ß√£o POST com JSON...");
try {
    dict dados_post = dict();
    dados_post.add("nome", "NajaScript");
    dados_post.add("versao", "1.0");
    dados_post.add("teste", true);
    
    dict options = dict();
    options.add("method", "POST");
    options.add("body", dados_post);
    
    Response response = fetch("https://httpbin.org/post", options);
    
    println("Status POST: " + response.status);
    if (response.ok) {
        println("POST bem-sucedido!");
    }
} catch (Exception e) {
    println("Erro na requisi√ß√£o POST: " + e.getMessage());
}

// 5. TESTE COMBINADO: EVENTOS + JSON
println("\n5. TESTE COMBINADO: EVENTOS + JSON:");

// Criar um sistema de notifica√ß√µes
function processarNotificacao(dados_json) {
    dict notificacao = JSON.parse(dados_json);
    println("Notifica√ß√£o processada:");
    println("T√≠tulo: " + notificacao.get("titulo"));
    println("Mensagem: " + notificacao.get("mensagem"));
    println("Timestamp: " + notificacao.get("timestamp"));
}

// Registrar listener para notifica√ß√µes
addEventListener("notificacao", processarNotificacao);

// Simular chegada de notifica√ß√£o
dict nova_notificacao = dict();
nova_notificacao.add("titulo", "Nova Mensagem");
nova_notificacao.add("mensagem", "Voc√™ tem uma nova mensagem!");
nova_notificacao.add("timestamp", "2024-01-01T12:00:00");

string notificacao_json = JSON.stringify(nova_notificacao);
dispatchEvent("notificacao", notificacao_json);

// 6. TESTE AVAN√áADO DE EVENTOS
println("\n6. TESTE AVAN√áADO DE EVENTOS:");

// Sistema de chat simulado
EventEmitter chat = createEventEmitter();

function onUsuarioEntrou(nome) {
    println("üë§ " + nome + " entrou no chat");
    // Notificar outros usu√°rios
    chat.emit("notificacao", nome + " entrou no chat");
}

function onMensagem(usuario, mensagem) {
    println("üí¨ " + usuario + ": " + mensagem);
}

function onNotificacao(msg) {
    println("üîî " + msg);
}

// Registrar eventos do chat
chat.on("usuario_entrou", onUsuarioEntrou);
chat.on("mensagem", onMensagem);
chat.on("notificacao", onNotificacao);

// Simular atividade do chat
chat.emit("usuario_entrou", "Jo√£o");
chat.emit("usuario_entrou", "Maria");
chat.emit("mensagem", "Jo√£o", "Ol√° pessoal!");
chat.emit("mensagem", "Maria", "Oi Jo√£o!");

// Remover listener
chat.off("usuario_entrou", onUsuarioEntrou);
chat.emit("usuario_entrou", "Pedro"); // N√£o deve mostrar entrada

println("\n=== TESTE COMPLETO FINALIZADO ===");
println("‚úÖ JSON: Serializa√ß√£o e deserializa√ß√£o funcionando");
println("‚úÖ Fetch: Requisi√ß√µes HTTP funcionando");
println("‚úÖ Eventos: Sistema de eventos funcionando");
println("‚úÖ Todas as funcionalidades s√£o padr√£o (sem imports)"); 