// Jogo de Nave Espacial com NajaScript
import "NajaGame"

// Inicializa o jogo
print("Inicializando o jogo...");
initGame(800, 600, "Nave Espacial - NajaGame");
setIcon("assets/logoNajaGame.png");
print("Jogo inicializado!");

// Carrega os recursos
print("Carregando recursos...");
int nave = loadImage("assets/logoNajaGame.png");
print("Nave carregada com ID: " + toString(nave));

// Posição inicial da nave
int naveX = 375;
int naveY = 500;
int naveWidth = 50;
int naveHeight = 50;

// Configuração dos asteroides - todos começam acima da tela
int numAsteroides = 5;
list asteroidesX = list(100, 250, 400, 550, 700);
list asteroidesY = list(600, 500, 400, 300, 200); // Posições iniciais espalhadas
list velocidades = list(3, 4, 5, 3, 4);

// Controle de tempo e jogo
float tempoInicial = time();
int pontuacao = 0;
int tempoJogo = 30; // 30 segundos de jogo
bool jogoAtivo = true;

print("Iniciando loop principal...");
while (jogoAtivo && time() - tempoInicial < tempoJogo) {
    // Limpa a tela com cor preta
    clearScreen(0, 0, 0);
    
    // Movimento automático da nave (suave, simulando input)
    int movimento = int(sin(time() * 2) * 5);
    if (movimento > 0) {
        naveX = naveX + movimento;
    } else {
        // Convertendo movimento negativo em positivo para não usar subtração
        naveX = naveX - (movimento * -1);
    }
    
    // Limites da tela
    if (naveX < 0) naveX = 0;
    if (naveX > 750) naveX = 750;
    
    // Processa todos os asteroides
    for (int i = 0; i < numAsteroides; i = i + 1) {
        // Obtém dados do asteroide
        int asterX = asteroidesX.get(i);
        int asterY = asteroidesY.get(i);
        int velocidade = velocidades.get(i);
        
        // Move o asteroide
        asterY = asterY + velocidade;
        asteroidesY.replace(i, asterY);
        
        // Se asteroide saiu da tela, reposiciona no topo
        if (asterY > 600) {
            // Reposiciona acima da tela (sem usar números negativos)
            asteroidesY.replace(i, 0);
            // Varia a posição X 
            int newX = (asterX + 123) % 750;
            asteroidesX.replace(i, newX);
            pontuacao = pontuacao + 1;
        }
        
        // Desenha apenas asteroides que estão dentro da tela
        if (asterY <= 600) {
            drawImage(nave, asterX, asterY, 30, 30);
            
            // Verifica colisão
            if (naveX < asterX + 30 &&
                naveX + naveWidth > asterX &&
                naveY < asterY + 30 &&
                naveY + naveHeight > asterY) {
                print("Colisão detectada! Fim de jogo.");
                jogoAtivo = false;
                break;
            }
        }
    }
    
    // Desenha a nave
    drawImage(nave, naveX, naveY, naveWidth, naveHeight);
    
    // Exibe informações
    drawText("Pontuação: " + toString(pontuacao), 10, 30, 20, 255, 255, 255);
    int tempoRestante = tempoJogo - int(time() - tempoInicial);
    if (tempoRestante < 0) tempoRestante = 0;
    drawText("Tempo: " + toString(tempoRestante), 10, 60, 20, 255, 255, 255);
    
    // Atualiza a janela
    updateWindow();
}

// Tela de fim de jogo
clearScreen(0, 0, 0);
drawText("Fim de Jogo", 300, 250, 30, 255, 255, 255);
drawText("Sua pontuação: " + toString(pontuacao), 300, 300, 20, 255, 255, 255);
updateWindow();

// Aguarda 3 segundos antes de fechar
float tempoFim = time();
while (time() - tempoFim < 3) {
    updateWindow();
}

// Finaliza
print("Finalizando o jogo...");
quitGame();
print("Jogo finalizado!"); 